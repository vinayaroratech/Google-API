// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Reseller v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Creates and manages your customers and their subscriptions.
// API Documentation Link https://developers.google.com/google-apps/reseller/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Reseller/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Reseller.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Reseller.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Reseller.v1;
using Google.Apis.Reseller.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Resellerv1.Methods
{
  
    public static class SubscriptionsSample
    {


        /// <summary>
        /// Activates a subscription previously suspended by the reseller 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/activate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Activate(ResellerService service, string customerId, string subscriptionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.Activate(customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Activate failed.", ex);
            }
        }

        /// <summary>
        /// Update a subscription plan. Use this method to update a plan for a 30-day trial or a flexible plan subscription to an annual commitment plan with monthly or yearly payments. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/changePlan
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <param name="body">A valid Reseller v1 body.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription ChangePlan(ResellerService service, string customerId, string subscriptionId, ChangePlanRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.ChangePlan(body, customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ChangePlan failed.", ex);
            }
        }

        /// <summary>
        /// Update a user license's renewal settings. This is applicable for accounts with annual commitment plans only. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/changeRenewalSettings
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <param name="body">A valid Reseller v1 body.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription ChangeRenewalSettings(ResellerService service, string customerId, string subscriptionId, RenewalSettings body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.ChangeRenewalSettings(body, customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ChangeRenewalSettings failed.", ex);
            }
        }

        /// <summary>
        /// Update a subscription's user license settings. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/changeSeats
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <param name="body">A valid Reseller v1 body.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription ChangeSeats(ResellerService service, string customerId, string subscriptionId, Seats body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.ChangeSeats(body, customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ChangeSeats failed.", ex);
            }
        }

        /// <summary>
        /// Cancel, suspend or transfer a subscription to direct. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <param name="deletionType">The deletionType query string enables the cancellation, downgrade, or suspension of a subscription.</param>
        public static void Delete(ResellerService service, string customerId, string subscriptionId, string deletionType)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);
                if (deletionType == null)
                    throw new ArgumentNullException(deletionType);

                // Make the request.
                 service.Subscriptions.Delete(customerId, subscriptionId, deletionType).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Get a specific subscription. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Get(ResellerService service, string customerId, string subscriptionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.Get(customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Get failed.", ex);
            }
        }
        public class SubscriptionsInsertOptionalParms
        {
            /// The customerAuthToken query string is required when creating a resold account that transfers a direct customer's subscription or transfers another reseller customer's subscription to your reseller management. This is a hexadecimal authentication token needed to complete the subscription transfer. For more information, see the administrator help center.
            public string CustomerAuthToken { get; set; }  
        
        }
 
        /// <summary>
        /// Create or transfer a subscription. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="body">A valid Reseller v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Insert(ResellerService service, string customerId, Subscription body, SubscriptionsInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);

                // Building the initial request.
                var request = service.Subscriptions.Insert(body, customerId);

                // Applying optional parameters to the request.                
                request = (SubscriptionsResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Insert failed.", ex);
            }
        }
        public class SubscriptionsListOptionalParms
        {
            /// The customerAuthToken query string is required when creating a resold account that transfers a direct customer's subscription or transfers another reseller customer's subscription to your reseller management. This is a hexadecimal authentication token needed to complete the subscription transfer. For more information, see the administrator help center.
            public string CustomerAuthToken { get; set; }  
            /// Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.
            public string CustomerId { get; set; }  
            /// When retrieving all of your subscriptions and filtering for specific customers, you can enter a prefix for a customer name. Using an example customer group that includes exam.com, example20.com and example.com:  - exa -- Returns all customer names that start with 'exa' which could include exam.com, example20.com, and example.com. A name prefix is similar to using a regular expression's asterisk, exa*. - example -- Returns example20.com and example.com.
            public string CustomerNamePrefix { get; set; }  
            /// When retrieving a large list, the maxResults is the maximum number of results per page. The nextPageToken value takes you to the next page. The default is 20.
            public int? MaxResults { get; set; }  
            /// Token to specify next page in the list
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List of subscriptions managed by the reseller. The list can be all subscriptions, all of a customer's subscriptions, or all of a customer's transferable subscriptions. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>SubscriptionsResponse</returns>
        public static Subscriptions List(ResellerService service, SubscriptionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Subscriptions.List();

                // Applying optional parameters to the request.                
                request = (SubscriptionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.List failed.", ex);
            }
        }

        /// <summary>
        /// Immediately move a 30-day free trial subscription to a paid service subscription. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/startPaidService
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription StartPaidService(ResellerService service, string customerId, string subscriptionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.StartPaidService(customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.StartPaidService failed.", ex);
            }
        }

        /// <summary>
        /// Suspends an active subscription. 
        /// Documentation https://developers.google.com/reseller/v1/reference/subscriptions/suspend
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="customerId">Either the customer's primary domain name or the customer's unique identifier. If using the domain name, we do not recommend using a customerId as a key for persistent data. If the domain name for a customerId is changed, the Google system automatically updates.</param>
        /// <param name="subscriptionId">This is a required property. The subscriptionId is the subscription identifier and is unique for each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve all reseller subscriptions method.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Suspend(ResellerService service, string customerId, string subscriptionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (customerId == null)
                    throw new ArgumentNullException(customerId);
                if (subscriptionId == null)
                    throw new ArgumentNullException(subscriptionId);

                // Make the request.
                return service.Subscriptions.Suspend(customerId, subscriptionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Suspend failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}