// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Reseller v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Creates and manages your customers and their subscriptions.
// API Documentation Link https://developers.google.com/google-apps/reseller/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Reseller/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Reseller.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Reseller.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Reseller.v1;
using Google.Apis.Reseller.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Resellerv1.Methods
{
  
    public static class ResellernotifySample
    {


        /// <summary>
        /// Returns all the details of the watch corresponding to the reseller. 
        /// Documentation https://developers.google.com/reseller/v1/reference/resellernotify/getwatchdetails
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <returns>ResellernotifyGetwatchdetailsResponseResponse</returns>
        public static ResellernotifyGetwatchdetailsResponse Getwatchdetails(ResellerService service)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Make the request.
                return service.Resellernotify.Getwatchdetails().Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Resellernotify.Getwatchdetails failed.", ex);
            }
        }
        public class ResellernotifyRegisterOptionalParms
        {
            /// The service account which will own the created Cloud-PubSub topic.
            public string ServiceAccountEmailAddress { get; set; }  
        
        }
 
        /// <summary>
        /// Registers a Reseller for receiving notifications. 
        /// Documentation https://developers.google.com/reseller/v1/reference/resellernotify/register
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ResellernotifyResourceResponse</returns>
        public static ResellernotifyResource Register(ResellerService service, ResellernotifyRegisterOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Resellernotify.Register();

                // Applying optional parameters to the request.                
                request = (ResellernotifyResource.RegisterRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Resellernotify.Register failed.", ex);
            }
        }
        public class ResellernotifyUnregisterOptionalParms
        {
            /// The service account which owns the Cloud-PubSub topic.
            public string ServiceAccountEmailAddress { get; set; }  
        
        }
 
        /// <summary>
        /// Unregisters a Reseller for receiving notifications. 
        /// Documentation https://developers.google.com/reseller/v1/reference/resellernotify/unregister
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Reseller service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ResellernotifyResourceResponse</returns>
        public static ResellernotifyResource Unregister(ResellerService service, ResellernotifyUnregisterOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Resellernotify.Unregister();

                // Applying optional parameters to the request.                
                request = (ResellernotifyResource.UnregisterRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Resellernotify.Unregister failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}