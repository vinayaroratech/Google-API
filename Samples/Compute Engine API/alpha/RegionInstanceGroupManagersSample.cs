// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Compute alpha API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Creates and runs virtual machines on Google Cloud Platform.
// API Documentation Link https://developers.google.com/compute/docs/reference/latest/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Compute/alpha/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Compute.alpha/ 
// Install Command: PM>  Install-Package Google.Apis.Compute.alpha
//
//------------------------------------------------------------------------------  
using Google.Apis.Compute.alpha;
using Google.Apis.Compute.alpha.Data;
using System;

namespace GoogleSamplecSharpSample.Computealpha.Methods
{
  
    public static class RegionInstanceGroupManagersSample
    {

        public class RegionInstanceGroupManagersAbandonInstancesOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Schedules a group action to remove the specified instances from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.You can specify a maximum of 1000 instances with this method per request. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/abandonInstances
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation AbandonInstances(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersAbandonInstancesRequest body, RegionInstanceGroupManagersAbandonInstancesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.AbandonInstances(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.AbandonInstancesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.AbandonInstances failed.", ex);
            }
        }

        /// <summary>
        /// Apply updates to selected instances the managed instance group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/applyUpdatesToInstances
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request, should conform to RFC1035.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group, should conform to RFC1035.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation ApplyUpdatesToInstances(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersApplyUpdatesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Make the request.
                return service.RegionInstanceGroupManagers.ApplyUpdatesToInstances(body, project, region, instanceGroupManager).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.ApplyUpdatesToInstances failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersDeleteOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes the specified managed instance group and all of the instances in that group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group to delete.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.Delete(project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Delete failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersDeleteInstancesOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Schedules a group action to delete the specified instances in the managed instance group. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.You can specify a maximum of 1000 instances with this method per request. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/deleteInstances
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation DeleteInstances(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersDeleteInstancesRequest body, RegionInstanceGroupManagersDeleteInstancesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.DeleteInstances(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.DeleteInstancesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.DeleteInstances failed.", ex);
            }
        }

        /// <summary>
        /// Delete selected per-instance configs for the managed instance group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/deletePerInstanceConfigs
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request, should conform to RFC1035.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group. It should conform to RFC1035.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation DeletePerInstanceConfigs(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagerDeleteInstanceConfigReq body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Make the request.
                return service.RegionInstanceGroupManagers.DeletePerInstanceConfigs(body, project, region, instanceGroupManager).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.DeletePerInstanceConfigs failed.", ex);
            }
        }

        /// <summary>
        /// Returns all of the details about the specified managed instance group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group to return.</param>
        /// <returns>InstanceGroupManagerResponse</returns>
        public static InstanceGroupManager Get(ComputeService service, string project, string region, string instanceGroupManager)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Make the request.
                return service.RegionInstanceGroupManagers.Get(project, region, instanceGroupManager).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Get failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersInsertOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Creates a managed instance group using the information that you specify in the request. After the group is created, it schedules an action to create instances in the group using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.A regional managed instance group can contain up to 2000 instances. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Insert(ComputeService service, string project, string region, InstanceGroupManager body, RegionInstanceGroupManagersInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.Insert(body, project, region);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Insert failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersListOptionalParms
        {
            /// Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
            public string Filter { get; set; }  
            /// The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
            public int? MaxResults { get; set; }  
            /// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.Currently, only sorting by name or creationTimestamp desc is supported.
            public string OrderBy { get; set; }  
            /// Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Retrieves the list of managed instance groups that are contained within the specified region. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RegionInstanceGroupManagerListResponse</returns>
        public static RegionInstanceGroupManagerList List(ComputeService service, string project, string region, RegionInstanceGroupManagersListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.List(project, region);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.List failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersListManagedInstancesOptionalParms
        {
            /// NA
            public string Filter { get; set; }  
            /// NA
            public int? MaxResults { get; set; }  
            /// NA
            public string Order_by { get; set; }  
            /// NA
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/listManagedInstances
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RegionInstanceGroupManagersListInstancesResponseResponse</returns>
        public static RegionInstanceGroupManagersListInstancesResponse ListManagedInstances(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersListManagedInstancesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.ListManagedInstances(project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.ListManagedInstancesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.ListManagedInstances failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersListPerInstanceConfigsOptionalParms
        {
            /// Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
            public string Filter { get; set; }  
            /// The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
            public int? MaxResults { get; set; }  
            /// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.Currently, only sorting by name or creationTimestamp desc is supported.
            public string OrderBy { get; set; }  
            /// Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all of the per-instance configs defined for the managed instance group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/listPerInstanceConfigs
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request, should conform to RFC1035.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group. It should conform to RFC1035.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RegionInstanceGroupManagersListInstanceConfigsRespResponse</returns>
        public static RegionInstanceGroupManagersListInstanceConfigsResp ListPerInstanceConfigs(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersListPerInstanceConfigsOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.ListPerInstanceConfigs(project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.ListPerInstanceConfigsRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.ListPerInstanceConfigs failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersPatchOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">The name of the instance group manager.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Patch(ComputeService service, string project, string region, string instanceGroupManager, InstanceGroupManager body, RegionInstanceGroupManagersPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.Patch(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Patch failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersRecreateInstancesOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Schedules a group action to recreate the specified instances in the managed instance group. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the action is scheduled even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.You can specify a maximum of 1000 instances with this method per request. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/recreateInstances
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation RecreateInstances(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersRecreateRequest body, RegionInstanceGroupManagersRecreateInstancesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.RecreateInstances(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.RecreateInstancesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.RecreateInstances failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersResizeOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Changes the intended size for the managed instance group. If you increase the size, the group schedules actions to create new instances using the current instance template. If you decrease the size, the group schedules delete actions on one or more instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/resize
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="size">Number of instances that should exist in this instance group manager.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Resize(ComputeService service, string project, string region, string instanceGroupManager, int? size, RegionInstanceGroupManagersResizeOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);
                if (size == null)
                    throw new ArgumentNullException(size);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.Resize(project, region, instanceGroupManager, size);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.ResizeRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Resize failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersSetAutoHealingPoliciesOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Modifies the autohealing policy for the instances in this managed instance group. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/setAutoHealingPolicies
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation SetAutoHealingPolicies(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersSetAutoHealingRequest body, RegionInstanceGroupManagersSetAutoHealingPoliciesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.SetAutoHealingPolicies(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.SetAutoHealingPoliciesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.SetAutoHealingPolicies failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersSetInstanceTemplateOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/setInstanceTemplate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation SetInstanceTemplate(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersSetTemplateRequest body, RegionInstanceGroupManagersSetInstanceTemplateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.SetInstanceTemplate(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.SetInstanceTemplateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.SetInstanceTemplate failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersSetTargetPoolsOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/setTargetPools
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">Name of the managed instance group.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation SetTargetPools(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagersSetTargetPoolsRequest body, RegionInstanceGroupManagersSetTargetPoolsOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.SetTargetPools(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.SetTargetPoolsRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.SetTargetPools failed.", ex);
            }
        }

        /// <summary>
        /// Returns permissions that a caller has on the specified resource. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/testIamPermissions
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">The name of the region for this request.</param>
        /// <param name="resource">Name of the resource for this request.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <returns>TestPermissionsResponseResponse</returns>
        public static TestPermissionsResponse TestIamPermissions(ComputeService service, string project, string region, string resource, TestPermissionsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.RegionInstanceGroupManagers.TestIamPermissions(body, project, region, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.TestIamPermissions failed.", ex);
            }
        }
        public class RegionInstanceGroupManagersUpdateOptionalParms
        {
            /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listmanagedinstances method. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request.</param>
        /// <param name="instanceGroupManager">The name of the instance group manager.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Update(ComputeService service, string project, string region, string instanceGroupManager, InstanceGroupManager body, RegionInstanceGroupManagersUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Building the initial request.
                var request = service.RegionInstanceGroupManagers.Update(body, project, region, instanceGroupManager);

                // Applying optional parameters to the request.                
                request = (RegionInstanceGroupManagersResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.Update failed.", ex);
            }
        }

        /// <summary>
        /// Insert or patch (for the ones that already exist) per-instance configs for the managed instance group. perInstanceConfig.instance serves as a key used to distinguish whether to perform insert or patch. 
        /// Documentation https://developers.google.com/compute/alpha/reference/regionInstanceGroupManagers/updatePerInstanceConfigs
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Compute service.</param>  
        /// <param name="project">Project ID for this request.</param>
        /// <param name="region">Name of the region scoping this request, should conform to RFC1035.</param>
        /// <param name="instanceGroupManager">The name of the managed instance group. It should conform to RFC1035.</param>
        /// <param name="body">A valid Compute alpha body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation UpdatePerInstanceConfigs(ComputeService service, string project, string region, string instanceGroupManager, RegionInstanceGroupManagerUpdateInstanceConfigReq body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (instanceGroupManager == null)
                    throw new ArgumentNullException(instanceGroupManager);

                // Make the request.
                return service.RegionInstanceGroupManagers.UpdatePerInstanceConfigs(body, project, region, instanceGroupManager).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request RegionInstanceGroupManagers.UpdatePerInstanceConfigs failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}