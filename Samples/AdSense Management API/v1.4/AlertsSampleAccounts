// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Adsense v1.4 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Accesses AdSense publishers' inventory and generates performance reports.
// API Documentation Link https://developers.google.com/adsense/management/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Adsense/v1_4/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Adsense.v1_4/ 
// Install Command: PM>  Install-Package Google.Apis.Adsense.v1_4
//
//------------------------------------------------------------------------------  
using Google.Apis.Adsense.v1_4;
using Google.Apis.Adsense.v1_4.Data;
using System;

namespace GoogleSamplecSharpSample.Adsensev1_4.Methods
{
  
    public static class AlertsSample
    {


        /// <summary>
        /// Dismiss (delete) the specified alert from the specified publisher AdSense account. 
        /// Documentation https://developers.google.com/adsense/v1.4/reference/alerts/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsense service.</param>  
        /// <param name="accountId">Account which contains the ad unit.</param>
        /// <param name="alertId">Alert to delete.</param>
        public static void Delete(AdsenseService service, string accountId, string alertId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (alertId == null)
                    throw new ArgumentNullException(alertId);

                // Make the request.
                 service.Alerts.Delete(accountId, alertId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Alerts.Delete failed.", ex);
            }
        }
        public class AlertsListOptionalParms
        {
            /// The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.
            public string Locale { get; set; }  
        
        }
 
        /// <summary>
        /// List the alerts for the specified AdSense account. 
        /// Documentation https://developers.google.com/adsense/v1.4/reference/alerts/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsense service.</param>  
        /// <param name="accountId">Account for which to retrieve the alerts.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AlertsResponse</returns>
        public static Alerts List(AdsenseService service, string accountId, AlertsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Building the initial request.
                var request = service.Alerts.List(accountId);

                // Applying optional parameters to the request.                
                request = (AlertsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Alerts.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}