// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudmonitoring v2beta2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Accesses Google Cloud Monitoring data.
// API Documentation Link https://cloud.google.com/monitoring/v2beta2/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudmonitoring/v2beta2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudmonitoring.v2beta2/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudmonitoring.v2beta2
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudmonitoring.v2beta2;
using Google.Apis.Cloudmonitoring.v2beta2.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudmonitoringv2beta2.Methods
{
  
    public static class MetricDescriptorsSample
    {


        /// <summary>
        /// Create a new metric. 
        /// Documentation https://developers.google.com/cloudmonitoring/v2beta2/reference/metricDescriptors/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudmonitoring service.</param>  
        /// <param name="project">The project id. The value can be the numeric project ID or string-based project name.</param>
        /// <param name="body">A valid Cloudmonitoring v2beta2 body.</param>
        /// <returns>MetricDescriptorResponse</returns>
        public static MetricDescriptor Create(CloudmonitoringService service, string project, MetricDescriptor body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);

                // Make the request.
                return service.MetricDescriptors.Create(body, project).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request MetricDescriptors.Create failed.", ex);
            }
        }

        /// <summary>
        /// Delete an existing metric. 
        /// Documentation https://developers.google.com/cloudmonitoring/v2beta2/reference/metricDescriptors/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudmonitoring service.</param>  
        /// <param name="project">The project ID to which the metric belongs.</param>
        /// <param name="metric">Name of the metric.</param>
        /// <returns>DeleteMetricDescriptorResponseResponse</returns>
        public static DeleteMetricDescriptorResponse Delete(CloudmonitoringService service, string project, string metric)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);
                if (metric == null)
                    throw new ArgumentNullException(metric);

                // Make the request.
                return service.MetricDescriptors.Delete(project, metric).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request MetricDescriptors.Delete failed.", ex);
            }
        }
        public class MetricDescriptorsListOptionalParms
        {
            /// Maximum number of metric descriptors per page. Used for pagination. If not specified, count = 100.
            public int? Count { get; set; }  
            /// The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.
            public string PageToken { get; set; }  
            /// The query used to search against existing metrics. Separate keywords with a space; the service joins all keywords with AND, meaning that all keywords must match for a metric to be returned. If this field is omitted, all metrics are returned. If an empty string is passed with this field, no metrics are returned.
            public string Query { get; set; }  
        
        }
 
        /// <summary>
        /// List metric descriptors that match the query. If the query is not set, then all of the metric descriptors will be returned. Large responses will be paginated, use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken. 
        /// Documentation https://developers.google.com/cloudmonitoring/v2beta2/reference/metricDescriptors/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudmonitoring service.</param>  
        /// <param name="project">The project id. The value can be the numeric project ID or string-based project name.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListMetricDescriptorsResponseResponse</returns>
        public static ListMetricDescriptorsResponse List(CloudmonitoringService service, string project, MetricDescriptorsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);

                // Building the initial request.
                var request = service.MetricDescriptors.List(project);

                // Applying optional parameters to the request.                
                request = (MetricDescriptorsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request MetricDescriptors.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}