// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Drive v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
// API Documentation Link https://developers.google.com/drive/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Drive/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Drive.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Drive.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Drive.v2;
using Google.Apis.Drive.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Drivev2.Methods
{
  
    public static class RepliesSample
    {


        /// <summary>
        /// Deletes a reply. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="replyId">The ID of the reply.</param>
        public static void Delete(DriveService service, string fileId, string commentId, string replyId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);
                if (replyId == null)
                    throw new ArgumentNullException(replyId);

                // Make the request.
                 service.Replies.Delete(fileId, commentId, replyId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.Delete failed.", ex);
            }
        }
        public class RepliesGetOptionalParms
        {
            /// If set, this will succeed when retrieving a deleted reply.
            public bool? IncludeDeleted { get; set; }  
        
        }
 
        /// <summary>
        /// Gets a reply. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="replyId">The ID of the reply.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>CommentReplyResponse</returns>
        public static CommentReply Get(DriveService service, string fileId, string commentId, string replyId, RepliesGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);
                if (replyId == null)
                    throw new ArgumentNullException(replyId);

                // Building the initial request.
                var request = service.Replies.Get(fileId, commentId, replyId);

                // Applying optional parameters to the request.                
                request = (RepliesResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.Get failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new reply to the given comment. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="body">A valid Drive v2 body.</param>
        /// <returns>CommentReplyResponse</returns>
        public static CommentReply Insert(DriveService service, string fileId, string commentId, CommentReply body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);

                // Make the request.
                return service.Replies.Insert(body, fileId, commentId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.Insert failed.", ex);
            }
        }
        public class RepliesListOptionalParms
        {
            /// If set, all replies, including deleted replies (with content stripped) will be returned.
            public bool? IncludeDeleted { get; set; }  
            /// The maximum number of replies to include in the response, used for paging.
            public int? MaxResults { get; set; }  
            /// The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all of the replies to a comment. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>CommentReplyListResponse</returns>
        public static CommentReplyList List(DriveService service, string fileId, string commentId, RepliesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);

                // Building the initial request.
                var request = service.Replies.List(fileId, commentId);

                // Applying optional parameters to the request.                
                request = (RepliesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.List failed.", ex);
            }
        }

        /// <summary>
        /// Updates an existing reply. This method supports patch semantics. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="replyId">The ID of the reply.</param>
        /// <param name="body">A valid Drive v2 body.</param>
        /// <returns>CommentReplyResponse</returns>
        public static CommentReply Patch(DriveService service, string fileId, string commentId, string replyId, CommentReply body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);
                if (replyId == null)
                    throw new ArgumentNullException(replyId);

                // Make the request.
                return service.Replies.Patch(body, fileId, commentId, replyId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Updates an existing reply. 
        /// Documentation https://developers.google.com/drive/v2/reference/replies/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="replyId">The ID of the reply.</param>
        /// <param name="body">A valid Drive v2 body.</param>
        /// <returns>CommentReplyResponse</returns>
        public static CommentReply Update(DriveService service, string fileId, string commentId, string replyId, CommentReply body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (commentId == null)
                    throw new ArgumentNullException(commentId);
                if (replyId == null)
                    throw new ArgumentNullException(replyId);

                // Make the request.
                return service.Replies.Update(body, fileId, commentId, replyId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Replies.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}