// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Drive v3 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
// API Documentation Link https://developers.google.com/drive/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Drive/v3/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Drive.v3/ 
// Install Command: PM>  Install-Package Google.Apis.Drive.v3
//
//------------------------------------------------------------------------------  
using Google.Apis.Drive.v3;
using Google.Apis.Drive.v3.Data;
using System;

namespace GoogleSamplecSharpSample.Drivev3.Methods
{
  
    public static class RevisionsSample
    {


        /// <summary>
        /// Permanently deletes a revision. This method is only applicable to files with binary content in Drive. 
        /// Documentation https://developers.google.com/drive/v3/reference/revisions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="revisionId">The ID of the revision.</param>
        public static void Delete(DriveService service, string fileId, string revisionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (revisionId == null)
                    throw new ArgumentNullException(revisionId);

                // Make the request.
                 service.Revisions.Delete(fileId, revisionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Revisions.Delete failed.", ex);
            }
        }
        public class RevisionsGetOptionalParms
        {
            /// Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.
            public bool? AcknowledgeAbuse { get; set; }  
        
        }
 
        /// <summary>
        /// Gets a revision's metadata or content by ID. 
        /// Documentation https://developers.google.com/drive/v3/reference/revisions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="revisionId">The ID of the revision.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RevisionResponse</returns>
        public static Revision Get(DriveService service, string fileId, string revisionId, RevisionsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (revisionId == null)
                    throw new ArgumentNullException(revisionId);

                // Building the initial request.
                var request = service.Revisions.Get(fileId, revisionId);

                // Applying optional parameters to the request.                
                request = (RevisionsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Revisions.Get failed.", ex);
            }
        }
        public class RevisionsListOptionalParms
        {
            /// The maximum number of revisions to return per page.
            public int? PageSize { get; set; }  
            /// The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists a file's revisions. 
        /// Documentation https://developers.google.com/drive/v3/reference/revisions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RevisionListResponse</returns>
        public static RevisionList List(DriveService service, string fileId, RevisionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);

                // Building the initial request.
                var request = service.Revisions.List(fileId);

                // Applying optional parameters to the request.                
                request = (RevisionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Revisions.List failed.", ex);
            }
        }

        /// <summary>
        /// Updates a revision with patch semantics. 
        /// Documentation https://developers.google.com/drive/v3/reference/revisions/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Drive service.</param>  
        /// <param name="fileId">The ID of the file.</param>
        /// <param name="revisionId">The ID of the revision.</param>
        /// <param name="body">A valid Drive v3 body.</param>
        /// <returns>RevisionResponse</returns>
        public static Revision Update(DriveService service, string fileId, string revisionId, Revision body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (revisionId == null)
                    throw new ArgumentNullException(revisionId);

                // Make the request.
                return service.Revisions.Update(body, fileId, revisionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Revisions.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}