// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Clouderrorreporting v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors.
// API Documentation Link https://cloud.google.com/error-reporting/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Clouderrorreporting/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Clouderrorreporting.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Clouderrorreporting.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Clouderrorreporting.v1beta1;
using Google.Apis.Clouderrorreporting.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Clouderrorreportingv1beta1.Methods
{
  
    public static class EventsSample
    {

        public class EventsListOptionalParms
        {
            /// [Optional] A `next_page_token` provided by a previous response.
            public string PageToken { get; set; }  
            /// [Optional] The exact value to match against[`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).
            public string ServiceFilter.service { get; set; }  
            /// [Optional] The maximum number of results to return per response.
            public int? PageSize { get; set; }  
            /// [Optional] The exact value to match against[`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).
            public string ServiceFilter.version { get; set; }  
            /// [Optional] The exact value to match against[`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).
            public string ServiceFilter.resourceType { get; set; }  
            /// Restricts the query to the specified time range.
            public string TimeRange.period { get; set; }  
            /// [Required] The group for which events shall be returned.
            public string GroupId { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the specified events. 
        /// Documentation https://developers.google.com/clouderrorreporting/v1beta1/reference/events/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Clouderrorreporting service.</param>  
        /// <param name="projectName">[Required] The resource name of the Google Cloud Platform project. Writtenas `projects/` plus the[Google Cloud Platform projectID](https://support.google.com/cloud/answer/6158840).Example: `projects/my-project-123`.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListEventsResponseResponse</returns>
        public static ListEventsResponse List(ClouderrorreportingService service, string projectName, EventsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);

                // Building the initial request.
                var request = service.Events.List(projectName);

                // Applying optional parameters to the request.                
                request = (EventsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Events.List failed.", ex);
            }
        }

        /// <summary>
        /// Report an individual error event.This endpoint accepts <strong>either</strong> an OAuth token,<strong>or</strong> an<a href="https://support.google.com/cloud/answer/6158862">API key</a>for authentication. To use an API key, append it to the URL as the value ofa `key` parameter. For example:<pre>POST https://clouderrorreporting.googleapis.com/v1beta1/projects/example-project/events:report?key=123ABC456</pre> 
        /// Documentation https://developers.google.com/clouderrorreporting/v1beta1/reference/events/report
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Clouderrorreporting service.</param>  
        /// <param name="projectName">[Required] The resource name of the Google Cloud Platform project. Writtenas `projects/` plus the[Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840).Example: `projects/my-project-123`.</param>
        /// <param name="body">A valid Clouderrorreporting v1beta1 body.</param>
        /// <returns>ReportErrorEventResponseResponse</returns>
        public static ReportErrorEventResponse Report(ClouderrorreportingService service, string projectName, ReportedErrorEvent body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);

                // Make the request.
                return service.Events.Report(body, projectName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Events.Report failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}