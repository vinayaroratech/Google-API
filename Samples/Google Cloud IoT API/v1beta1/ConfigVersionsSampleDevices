// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudiot v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.
// API Documentation Link https://cloud.google.com/iot
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudiot/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudiot.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudiot.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudiot.v1beta1;
using Google.Apis.Cloudiot.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudiotv1beta1.Methods
{
  
    public static class ConfigVersionsSample
    {

        public class ConfigVersionsListOptionalParms
        {
            /// The number of versions to list. Versions are listed in decreasing order ofthe version number. The maximum number of versions retained is 10. If thisvalue is zero, it will return all the versions available.
            public int? NumVersions { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the last few versions of the device configuration in descendingorder (i.e.: newest first). 
        /// Documentation https://developers.google.com/cloudiot/v1beta1/reference/configVersions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudiot service.</param>  
        /// <param name="name">The name of the device. For example,`projects/p0/locations/us-central1/registries/registry0/devices/device0` or`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListDeviceConfigVersionsResponseResponse</returns>
        public static ListDeviceConfigVersionsResponse List(CloudiotService service, string name, ConfigVersionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.ConfigVersions.List(name);

                // Applying optional parameters to the request.                
                request = (ConfigVersionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ConfigVersions.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}