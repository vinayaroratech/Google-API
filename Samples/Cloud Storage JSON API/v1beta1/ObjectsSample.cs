// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Storage v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Lets you store and retrieve potentially-large, immutable data objects.
// API Documentation Link https://developers.google.com/storage/docs/json_api/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Storage/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Storage.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Storage.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Storage.v1beta1;
using Google.Apis.Storage.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Storagev1beta1.Methods
{
  
    public static class ObjectsSample
    {


        /// <summary>
        /// Deletes data blobs and associated metadata. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which the object resides.</param>
        /// <param name="object">Name of the object.</param>
        public static void Delete(StorageService service, string bucket, string object)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);
                if (object == null)
                    throw new ArgumentNullException(object);

                // Make the request.
                 service.Objects.Delete(bucket, object).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.Delete failed.", ex);
            }
        }
        public class ObjectsGetOptionalParms
        {
            /// Set of properties to return. Defaults to no_acl.
            public string Projection { get; set; }  
        
        }
 
        /// <summary>
        /// Retrieves objects or their associated metadata. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which the object resides.</param>
        /// <param name="object">Name of the object.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ObjectResponse</returns>
        public static Object Get(StorageService service, string bucket, string object, ObjectsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);
                if (object == null)
                    throw new ArgumentNullException(object);

                // Building the initial request.
                var request = service.Objects.Get(bucket, object);

                // Applying optional parameters to the request.                
                request = (ObjectsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.Get failed.", ex);
            }
        }
        public class ObjectsInsertOptionalParms
        {
            /// Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any.
            public string Name { get; set; }  
            /// Set of properties to return. Defaults to no_acl, unless the object resource specifies the acl property, when it defaults to full.
            public string Projection { get; set; }  
        
        }
 
        /// <summary>
        /// Stores new data blobs and associated metadata. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.</param>
        /// <param name="body">A valid Storage v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ObjectResponse</returns>
        public static Object Insert(StorageService service, string bucket, Object body, ObjectsInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);

                // Building the initial request.
                var request = service.Objects.Insert(body, bucket);

                // Applying optional parameters to the request.                
                request = (ObjectsResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.Insert failed.", ex);
            }
        }
        public class ObjectsListOptionalParms
        {
            /// Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.
            public string Delimiter { get; set; }  
            /// Maximum number of items plus prefixes to return. As duplicate prefixes are omitted, fewer total results may be returned than requested.
            public int? Max-results { get; set; }  
            /// A previously-returned page token representing part of the larger set of results to view.
            public string PageToken { get; set; }  
            /// Filter results to objects whose names begin with this prefix.
            public string Prefix { get; set; }  
            /// Set of properties to return. Defaults to no_acl.
            public string Projection { get; set; }  
        
        }
 
        /// <summary>
        /// Retrieves a list of objects matching the criteria. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which to look for objects.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ObjectsResponse</returns>
        public static Objects List(StorageService service, string bucket, ObjectsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);

                // Building the initial request.
                var request = service.Objects.List(bucket);

                // Applying optional parameters to the request.                
                request = (ObjectsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.List failed.", ex);
            }
        }
        public class ObjectsPatchOptionalParms
        {
            /// Set of properties to return. Defaults to full.
            public string Projection { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a data blob's associated metadata. This method supports patch semantics. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which the object resides.</param>
        /// <param name="object">Name of the object.</param>
        /// <param name="body">A valid Storage v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ObjectResponse</returns>
        public static Object Patch(StorageService service, string bucket, string object, Object body, ObjectsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);
                if (object == null)
                    throw new ArgumentNullException(object);

                // Building the initial request.
                var request = service.Objects.Patch(body, bucket, object);

                // Applying optional parameters to the request.                
                request = (ObjectsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.Patch failed.", ex);
            }
        }
        public class ObjectsUpdateOptionalParms
        {
            /// Set of properties to return. Defaults to full.
            public string Projection { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a data blob's associated metadata. 
        /// Documentation https://developers.google.com/storage/v1beta1/reference/objects/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Storage service.</param>  
        /// <param name="bucket">Name of the bucket in which the object resides.</param>
        /// <param name="object">Name of the object.</param>
        /// <param name="body">A valid Storage v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ObjectResponse</returns>
        public static Object Update(StorageService service, string bucket, string object, Object body, ObjectsUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (bucket == null)
                    throw new ArgumentNullException(bucket);
                if (object == null)
                    throw new ArgumentNullException(object);

                // Building the initial request.
                var request = service.Objects.Update(body, bucket, object);

                // Applying optional parameters to the request.                
                request = (ObjectsResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Objects.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}