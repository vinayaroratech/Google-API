// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Gmail v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Access Gmail mailboxes including sending user email.
// API Documentation Link https://developers.google.com/gmail/api/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Gmail/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Gmail.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Gmail.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Gmail.v1;
using Google.Apis.Gmail.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Gmailv1.Methods
{
  
    public static class SmimeInfoSample
    {


        /// <summary>
        /// Deletes the specified S/MIME config for the specified send-as alias. 
        /// Documentation https://developers.google.com/gmail/v1/reference/smimeInfo/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
        /// <param name="id">The immutable ID for the SmimeInfo.</param>
        public static void Delete(GmailService service, string userId, string sendAsEmail, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (sendAsEmail == null)
                    throw new ArgumentNullException(sendAsEmail);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                 service.SmimeInfo.Delete(userId, sendAsEmail, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request SmimeInfo.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Gets the specified S/MIME config for the specified send-as alias. 
        /// Documentation https://developers.google.com/gmail/v1/reference/smimeInfo/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
        /// <param name="id">The immutable ID for the SmimeInfo.</param>
        /// <returns>SmimeInfoResponse</returns>
        public static SmimeInfo Get(GmailService service, string userId, string sendAsEmail, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (sendAsEmail == null)
                    throw new ArgumentNullException(sendAsEmail);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.SmimeInfo.Get(userId, sendAsEmail, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request SmimeInfo.Get failed.", ex);
            }
        }

        /// <summary>
        /// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key. 
        /// Documentation https://developers.google.com/gmail/v1/reference/smimeInfo/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
        /// <param name="body">A valid Gmail v1 body.</param>
        /// <returns>SmimeInfoResponse</returns>
        public static SmimeInfo Insert(GmailService service, string userId, string sendAsEmail, SmimeInfo body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (sendAsEmail == null)
                    throw new ArgumentNullException(sendAsEmail);

                // Make the request.
                return service.SmimeInfo.Insert(body, userId, sendAsEmail).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request SmimeInfo.Insert failed.", ex);
            }
        }

        /// <summary>
        /// Lists S/MIME configs for the specified send-as alias. 
        /// Documentation https://developers.google.com/gmail/v1/reference/smimeInfo/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
        /// <returns>ListSmimeInfoResponseResponse</returns>
        public static ListSmimeInfoResponse List(GmailService service, string userId, string sendAsEmail)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (sendAsEmail == null)
                    throw new ArgumentNullException(sendAsEmail);

                // Make the request.
                return service.SmimeInfo.List(userId, sendAsEmail).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request SmimeInfo.List failed.", ex);
            }
        }

        /// <summary>
        /// Sets the default S/MIME config for the specified send-as alias. 
        /// Documentation https://developers.google.com/gmail/v1/reference/smimeInfo/setDefault
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
        /// <param name="id">The immutable ID for the SmimeInfo.</param>
        public static void SetDefault(GmailService service, string userId, string sendAsEmail, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (sendAsEmail == null)
                    throw new ArgumentNullException(sendAsEmail);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                 service.SmimeInfo.SetDefault(userId, sendAsEmail, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request SmimeInfo.SetDefault failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}