// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Gmail v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Access Gmail mailboxes including sending user email.
// API Documentation Link https://developers.google.com/gmail/api/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Gmail/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Gmail.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Gmail.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Gmail.v1;
using Google.Apis.Gmail.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Gmailv1.Methods
{
  
    public static class ThreadsSample
    {


        /// <summary>
        /// Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer threads.trash instead. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="id">ID of the Thread to delete.</param>
        public static void Delete(GmailService service, string userId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                 service.Threads.Delete(userId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.Delete failed.", ex);
            }
        }
        public class ThreadsGetOptionalParms
        {
            /// The format to return the messages in.
            public string Format { get; set; }  
            /// When given and format is METADATA, only include headers specified.
            public string MetadataHeaders { get; set; }  
        
        }
 
        /// <summary>
        /// Gets the specified thread. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="id">The ID of the thread to retrieve.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ThreadResponse</returns>
        public static Thread Get(GmailService service, string userId, string id, ThreadsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Building the initial request.
                var request = service.Threads.Get(userId, id);

                // Applying optional parameters to the request.                
                request = (ThreadsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.Get failed.", ex);
            }
        }
        public class ThreadsListOptionalParms
        {
            /// Include threads from SPAM and TRASH in the results.
            public bool? IncludeSpamTrash { get; set; }  
            /// Only return threads with labels that match all of the specified label IDs.
            public string LabelIds { get; set; }  
            /// Maximum number of threads to return.
            public int? MaxResults { get; set; }  
            /// Page token to retrieve a specific page of results in the list.
            public string PageToken { get; set; }  
            /// Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread". Parameter cannot be used when accessing the api using the gmail.metadata scope.
            public string Q { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the threads in the user's mailbox. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListThreadsResponseResponse</returns>
        public static ListThreadsResponse List(GmailService service, string userId, ThreadsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Building the initial request.
                var request = service.Threads.List(userId);

                // Applying optional parameters to the request.                
                request = (ThreadsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.List failed.", ex);
            }
        }

        /// <summary>
        /// Modifies the labels applied to the thread. This applies to all messages in the thread. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/modify
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="id">The ID of the thread to modify.</param>
        /// <param name="body">A valid Gmail v1 body.</param>
        /// <returns>ThreadResponse</returns>
        public static Thread Modify(GmailService service, string userId, string id, ModifyThreadRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Threads.Modify(body, userId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.Modify failed.", ex);
            }
        }

        /// <summary>
        /// Moves the specified thread to the trash. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/trash
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="id">The ID of the thread to Trash.</param>
        /// <returns>ThreadResponse</returns>
        public static Thread Trash(GmailService service, string userId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Threads.Trash(userId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.Trash failed.", ex);
            }
        }

        /// <summary>
        /// Removes the specified thread from the trash. 
        /// Documentation https://developers.google.com/gmail/v1/reference/threads/untrash
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Gmail service.</param>  
        /// <param name="userId">The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="id">The ID of the thread to remove from Trash.</param>
        /// <returns>ThreadResponse</returns>
        public static Thread Untrash(GmailService service, string userId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Threads.Untrash(userId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Threads.Untrash failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}