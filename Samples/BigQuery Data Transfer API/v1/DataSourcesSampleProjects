// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Bigquerydatatransfer v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Transfers data from partner SaaS applications to Google BigQuery on a scheduled, managed basis.
// API Documentation Link https://cloud.google.com/bigquery/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Bigquerydatatransfer/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Bigquerydatatransfer.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Bigquerydatatransfer.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Bigquerydatatransfer.v1;
using Google.Apis.Bigquerydatatransfer.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Bigquerydatatransferv1.Methods
{
  
    public static class DataSourcesSample
    {

        public class DataSourcesListOptionalParms
        {
            /// Page size. The default page size is the maximum value of 1000 results.
            public int? PageSize { get; set; }  
            /// Pagination token, which can be used to request a specific pageof `ListDataSourcesRequest` list results. For multiple-pageresults, `ListDataSourcesResponse` outputsa `next_page` token, which can be used as the`page_token` value to request the next page of list results.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists supported data sources and returns their settings,which can be used for UI rendering. 
        /// Documentation https://developers.google.com/bigquerydatatransfer/v1/reference/dataSources/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquerydatatransfer service.</param>  
        /// <param name="parent">The BigQuery project id for which data sources should be returned.Must be in the form: `projects/{project_id}`</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListDataSourcesResponseResponse</returns>
        public static ListDataSourcesResponse List(BigquerydatatransferService service, string parent, DataSourcesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.DataSources.List(parent);

                // Applying optional parameters to the request.                
                request = (DataSourcesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request DataSources.List failed.", ex);
            }
        }

        /// <summary>
        /// Retrieves a supported data source and returns its settings,which can be used for UI rendering. 
        /// Documentation https://developers.google.com/bigquerydatatransfer/v1/reference/dataSources/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquerydatatransfer service.</param>  
        /// <param name="name">The field will contain name of the resource requested, for example:`projects/{project_id}/dataSources/{data_source_id}`</param>
        /// <returns>DataSourceResponse</returns>
        public static DataSource Get(BigquerydatatransferService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.DataSources.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request DataSources.Get failed.", ex);
            }
        }

        /// <summary>
        /// Returns true if valid credentials exist for the given data source andrequesting user.Some data sources doesn't support service account, so we need to talk tothem on behalf of the end user. This API just checks whether we have OAuthtoken for the particular user, which is a pre-requisite before user cancreate a transfer config. 
        /// Documentation https://developers.google.com/bigquerydatatransfer/v1/reference/dataSources/checkValidCreds
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquerydatatransfer service.</param>  
        /// <param name="name">The data source in the form:`projects/{project_id}/dataSources/{data_source_id}`</param>
        /// <param name="body">A valid Bigquerydatatransfer v1 body.</param>
        /// <returns>CheckValidCredsResponseResponse</returns>
        public static CheckValidCredsResponse CheckValidCreds(BigquerydatatransferService service, string name, CheckValidCredsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.DataSources.CheckValidCreds(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request DataSources.CheckValidCreds failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}