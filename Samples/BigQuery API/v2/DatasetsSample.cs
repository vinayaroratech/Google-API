// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Bigquery v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: A data platform for customers to create, manage, share and query data.
// API Documentation Link https://cloud.google.com/bigquery/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Bigquery/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Bigquery.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Bigquery.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Bigquery.v2;
using Google.Apis.Bigquery.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Bigqueryv2.Methods
{
  
    public static class DatasetsSample
    {

        public class DatasetsDeleteOptionalParms
        {
            /// If True, delete all the tables in the dataset. If False and the dataset contains tables, the request will fail. Default is False
            public bool? DeleteContents { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the dataset being deleted</param>
        /// <param name="datasetId">Dataset ID of dataset being deleted</param>
        /// <param name="optional">Optional paramaters.</param>
        public static void Delete(BigqueryService service, string projectId, string datasetId, DatasetsDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Datasets.Delete(projectId, datasetId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                 request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Returns the dataset specified by datasetID. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the requested dataset</param>
        /// <param name="datasetId">Dataset ID of the requested dataset</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Get(BigqueryService service, string projectId, string datasetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Get(projectId, datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Get failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new empty dataset. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the new dataset</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Insert(BigqueryService service, string projectId, Dataset body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Datasets.Insert(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Insert failed.", ex);
            }
        }
        public class DatasetsListOptionalParms
        {
            /// Whether to list all datasets, including hidden ones
            public bool? All { get; set; }  
            /// An expression for filtering the results of the request by label. The syntax is "labels.<name>[:<value>]". Multiple filters can be ANDed together by connecting with a space. Example: "labels.department:receiving labels.active". See Filtering datasets using labels for details.
            public string Filter { get; set; }  
            /// The maximum number of results to return
            public int? MaxResults { get; set; }  
            /// Page token, returned by a previous call, to request the next page of results
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all datasets in the specified project to which you have been granted the READER dataset role. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the datasets to be listed</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>DatasetListResponse</returns>
        public static DatasetList List(BigqueryService service, string projectId, DatasetsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Building the initial request.
                var request = service.Datasets.List(projectId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.List failed.", ex);
            }
        }

        /// <summary>
        /// Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports patch semantics. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the dataset being updated</param>
        /// <param name="datasetId">Dataset ID of the dataset being updated</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Patch(BigqueryService service, string projectId, string datasetId, Dataset body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Patch(body, projectId, datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/datasets/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the dataset being updated</param>
        /// <param name="datasetId">Dataset ID of the dataset being updated</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Update(BigqueryService service, string projectId, string datasetId, Dataset body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Update(body, projectId, datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}