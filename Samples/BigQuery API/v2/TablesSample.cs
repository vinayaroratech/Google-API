// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Bigquery v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: A data platform for customers to create, manage, share and query data.
// API Documentation Link https://cloud.google.com/bigquery/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Bigquery/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Bigquery.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Bigquery.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Bigquery.v2;
using Google.Apis.Bigquery.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Bigqueryv2.Methods
{
  
    public static class TablesSample
    {


        /// <summary>
        /// Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the table to delete</param>
        /// <param name="datasetId">Dataset ID of the table to delete</param>
        /// <param name="tableId">Table ID of the table to delete</param>
        public static void Delete(BigqueryService service, string projectId, string datasetId, string tableId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);
                if (tableId == null)
                    throw new ArgumentNullException(tableId);

                // Make the request.
                 service.Tables.Delete(projectId, datasetId, tableId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.Delete failed.", ex);
            }
        }
        public class TablesGetOptionalParms
        {
            /// List of fields to return (comma-separated). If unspecified, all fields are returned
            public string SelectedFields { get; set; }  
        
        }
 
        /// <summary>
        /// Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the requested table</param>
        /// <param name="datasetId">Dataset ID of the requested table</param>
        /// <param name="tableId">Table ID of the requested table</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TableResponse</returns>
        public static Table Get(BigqueryService service, string projectId, string datasetId, string tableId, TablesGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);
                if (tableId == null)
                    throw new ArgumentNullException(tableId);

                // Building the initial request.
                var request = service.Tables.Get(projectId, datasetId, tableId);

                // Applying optional parameters to the request.                
                request = (TablesResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.Get failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new, empty table in the dataset. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the new table</param>
        /// <param name="datasetId">Dataset ID of the new table</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>TableResponse</returns>
        public static Table Insert(BigqueryService service, string projectId, string datasetId, Table body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Tables.Insert(body, projectId, datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.Insert failed.", ex);
            }
        }
        public class TablesListOptionalParms
        {
            /// Maximum number of results to return
            public int? MaxResults { get; set; }  
            /// Page token, returned by a previous call, to request the next page of results
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all tables in the specified dataset. Requires the READER dataset role. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the tables to list</param>
        /// <param name="datasetId">Dataset ID of the tables to list</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TableListResponse</returns>
        public static TableList List(BigqueryService service, string projectId, string datasetId, TablesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Tables.List(projectId, datasetId);

                // Applying optional parameters to the request.                
                request = (TablesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.List failed.", ex);
            }
        }

        /// <summary>
        /// Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the table to update</param>
        /// <param name="datasetId">Dataset ID of the table to update</param>
        /// <param name="tableId">Table ID of the table to update</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>TableResponse</returns>
        public static Table Patch(BigqueryService service, string projectId, string datasetId, string tableId, Table body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);
                if (tableId == null)
                    throw new ArgumentNullException(tableId);

                // Make the request.
                return service.Tables.Patch(body, projectId, datasetId, tableId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. 
        /// Documentation https://developers.google.com/bigquery/v2/reference/tables/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Bigquery service.</param>  
        /// <param name="projectId">Project ID of the table to update</param>
        /// <param name="datasetId">Dataset ID of the table to update</param>
        /// <param name="tableId">Table ID of the table to update</param>
        /// <param name="body">A valid Bigquery v2 body.</param>
        /// <returns>TableResponse</returns>
        public static Table Update(BigqueryService service, string projectId, string datasetId, string tableId, Table body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);
                if (tableId == null)
                    throw new ArgumentNullException(tableId);

                // Make the request.
                return service.Tables.Update(body, projectId, datasetId, tableId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tables.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}