// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Adsensehost v4.1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
// API Documentation Link https://developers.google.com/adsense/host/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Adsensehost/v4_1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Adsensehost.v4_1/ 
// Install Command: PM>  Install-Package Google.Apis.Adsensehost.v4_1
//
//------------------------------------------------------------------------------  
using Google.Apis.Adsensehost.v4_1;
using Google.Apis.Adsensehost.v4_1.Data;
using System;

namespace GoogleSamplecSharpSample.Adsensehostv4_1.Methods
{
  
    public static class AdunitsSample
    {


        /// <summary>
        /// Delete the specified ad unit from the specified publisher AdSense account. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad unit.</param>
        /// <param name="adClientId">Ad client for which to get ad unit.</param>
        /// <param name="adUnitId">Ad unit to delete.</param>
        /// <returns>AdUnitResponse</returns>
        public static AdUnit Delete(AdsensehostService service, string accountId, string adClientId, string adUnitId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);
                if (adUnitId == null)
                    throw new ArgumentNullException(adUnitId);

                // Make the request.
                return service.Adunits.Delete(accountId, adClientId, adUnitId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Get the specified host ad unit in this AdSense account. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad unit.</param>
        /// <param name="adClientId">Ad client for which to get ad unit.</param>
        /// <param name="adUnitId">Ad unit to get.</param>
        /// <returns>AdUnitResponse</returns>
        public static AdUnit Get(AdsensehostService service, string accountId, string adClientId, string adUnitId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);
                if (adUnitId == null)
                    throw new ArgumentNullException(adUnitId);

                // Make the request.
                return service.Adunits.Get(accountId, adClientId, adUnitId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.Get failed.", ex);
            }
        }
        public class AdunitsGetAdCodeOptionalParms
        {
            /// Host custom channel to attach to the ad code.
            public string HostCustomChannelId { get; set; }  
        
        }
 
        /// <summary>
        /// Get ad code for the specified ad unit, attaching the specified host custom channels. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/getAdCode
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad client.</param>
        /// <param name="adClientId">Ad client with contains the ad unit.</param>
        /// <param name="adUnitId">Ad unit to get the code for.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AdCodeResponse</returns>
        public static AdCode GetAdCode(AdsensehostService service, string accountId, string adClientId, string adUnitId, AdunitsGetAdCodeOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);
                if (adUnitId == null)
                    throw new ArgumentNullException(adUnitId);

                // Building the initial request.
                var request = service.Adunits.GetAdCode(accountId, adClientId, adUnitId);

                // Applying optional parameters to the request.                
                request = (AdunitsResource.GetAdCodeRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.GetAdCode failed.", ex);
            }
        }

        /// <summary>
        /// Insert the supplied ad unit into the specified publisher AdSense account. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which will contain the ad unit.</param>
        /// <param name="adClientId">Ad client into which to insert the ad unit.</param>
        /// <param name="body">A valid Adsensehost v4.1 body.</param>
        /// <returns>AdUnitResponse</returns>
        public static AdUnit Insert(AdsensehostService service, string accountId, string adClientId, AdUnit body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);

                // Make the request.
                return service.Adunits.Insert(body, accountId, adClientId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.Insert failed.", ex);
            }
        }
        public class AdunitsListOptionalParms
        {
            /// Whether to include inactive ad units. Default: true.
            public bool? IncludeInactive { get; set; }  
            /// The maximum number of ad units to include in the response, used for paging.
            public int? MaxResults { get; set; }  
            /// A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List all ad units in the specified publisher's AdSense account. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad client.</param>
        /// <param name="adClientId">Ad client for which to list ad units.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AdUnitsResponse</returns>
        public static AdUnits List(AdsensehostService service, string accountId, string adClientId, AdunitsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);

                // Building the initial request.
                var request = service.Adunits.List(accountId, adClientId);

                // Applying optional parameters to the request.                
                request = (AdunitsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.List failed.", ex);
            }
        }

        /// <summary>
        /// Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad client.</param>
        /// <param name="adClientId">Ad client which contains the ad unit.</param>
        /// <param name="adUnitId">Ad unit to get.</param>
        /// <param name="body">A valid Adsensehost v4.1 body.</param>
        /// <returns>AdUnitResponse</returns>
        public static AdUnit Patch(AdsensehostService service, string accountId, string adClientId, string adUnitId, AdUnit body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);
                if (adUnitId == null)
                    throw new ArgumentNullException(adUnitId);

                // Make the request.
                return service.Adunits.Patch(body, accountId, adClientId, adUnitId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Update the supplied ad unit in the specified publisher AdSense account. 
        /// Documentation https://developers.google.com/adsensehost/v4.1/reference/adunits/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adsensehost service.</param>  
        /// <param name="accountId">Account which contains the ad client.</param>
        /// <param name="adClientId">Ad client which contains the ad unit.</param>
        /// <param name="body">A valid Adsensehost v4.1 body.</param>
        /// <returns>AdUnitResponse</returns>
        public static AdUnit Update(AdsensehostService service, string accountId, string adClientId, AdUnit body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (accountId == null)
                    throw new ArgumentNullException(accountId);
                if (adClientId == null)
                    throw new ArgumentNullException(adClientId);

                // Make the request.
                return service.Adunits.Update(body, accountId, adClientId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Adunits.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}