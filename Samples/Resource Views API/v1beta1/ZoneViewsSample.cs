// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Resourceviews v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Resource View API allows users to create and manage logical sets of Google Compute Engine instances.
// API Documentation Link https://developers.google.com/compute/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Resourceviews/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Resourceviews.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Resourceviews.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Resourceviews.v1beta1;
using Google.Apis.Resourceviews.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Resourceviewsv1beta1.Methods
{
  
    public static class ZoneViewsSample
    {


        /// <summary>
        /// Add resources to the view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/addresources
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="resourceViewName">The name of the resource view.</param>
        /// <param name="body">A valid Resourceviews v1beta1 body.</param>
        public static void Addresources(ResourceviewsService service, string projectName, string zone, string resourceViewName, ZoneViewsAddResourcesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (resourceViewName == null)
                    throw new ArgumentNullException(resourceViewName);

                // Make the request.
                 service.ZoneViews.Addresources(body, projectName, zone, resourceViewName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Addresources failed.", ex);
            }
        }

        /// <summary>
        /// Delete a resource view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="resourceViewName">The name of the resource view.</param>
        public static void Delete(ResourceviewsService service, string projectName, string zone, string resourceViewName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (resourceViewName == null)
                    throw new ArgumentNullException(resourceViewName);

                // Make the request.
                 service.ZoneViews.Delete(projectName, zone, resourceViewName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Get the information of a zonal resource view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="resourceViewName">The name of the resource view.</param>
        /// <returns>ResourceViewResponse</returns>
        public static ResourceView Get(ResourceviewsService service, string projectName, string zone, string resourceViewName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (resourceViewName == null)
                    throw new ArgumentNullException(resourceViewName);

                // Make the request.
                return service.ZoneViews.Get(projectName, zone, resourceViewName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Get failed.", ex);
            }
        }

        /// <summary>
        /// Create a resource view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="body">A valid Resourceviews v1beta1 body.</param>
        /// <returns>ZoneViewsInsertResponseResponse</returns>
        public static ZoneViewsInsertResponse Insert(ResourceviewsService service, string projectName, string zone, ResourceView body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);

                // Make the request.
                return service.ZoneViews.Insert(body, projectName, zone).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Insert failed.", ex);
            }
        }
        public class ZoneViewsListOptionalParms
        {
            /// Maximum count of results to be returned. Acceptable values are 0 to 5000, inclusive. (Default: 5000)
            public int? MaxResults { get; set; }  
            /// Specifies a nextPageToken returned by a previous list request. This token can be used to request the next page of results from a previous list request.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List resource views. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ZoneViewsListResponseResponse</returns>
        public static ZoneViewsListResponse List(ResourceviewsService service, string projectName, string zone, ZoneViewsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);

                // Building the initial request.
                var request = service.ZoneViews.List(projectName, zone);

                // Applying optional parameters to the request.                
                request = (ZoneViewsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.List failed.", ex);
            }
        }
        public class ZoneViewsListresourcesOptionalParms
        {
            /// Maximum count of results to be returned. Acceptable values are 0 to 5000, inclusive. (Default: 5000)
            public int? MaxResults { get; set; }  
            /// Specifies a nextPageToken returned by a previous list request. This token can be used to request the next page of results from a previous list request.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List the resources of the resource view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/listresources
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="resourceViewName">The name of the resource view.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ZoneViewsListResourcesResponseResponse</returns>
        public static ZoneViewsListResourcesResponse Listresources(ResourceviewsService service, string projectName, string zone, string resourceViewName, ZoneViewsListresourcesOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (resourceViewName == null)
                    throw new ArgumentNullException(resourceViewName);

                // Building the initial request.
                var request = service.ZoneViews.Listresources(projectName, zone, resourceViewName);

                // Applying optional parameters to the request.                
                request = (ZoneViewsResource.ListresourcesRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Listresources failed.", ex);
            }
        }

        /// <summary>
        /// Remove resources from the view. 
        /// Documentation https://developers.google.com/resourceviews/v1beta1/reference/zoneViews/removeresources
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Resourceviews service.</param>  
        /// <param name="projectName">The project name of the resource view.</param>
        /// <param name="zone">The zone name of the resource view.</param>
        /// <param name="resourceViewName">The name of the resource view.</param>
        /// <param name="body">A valid Resourceviews v1beta1 body.</param>
        public static void Removeresources(ResourceviewsService service, string projectName, string zone, string resourceViewName, ZoneViewsRemoveResourcesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (resourceViewName == null)
                    throw new ArgumentNullException(resourceViewName);

                // Make the request.
                 service.ZoneViews.Removeresources(body, projectName, zone, resourceViewName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request ZoneViews.Removeresources failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}