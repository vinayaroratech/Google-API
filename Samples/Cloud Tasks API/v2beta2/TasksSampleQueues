// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudtasks v2beta2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages the execution of large numbers of distributed requests. Cloud Tasks is in Alpha.
// API Documentation Link https://cloud.google.com/cloud-tasks/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudtasks/v2beta2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudtasks.v2beta2/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudtasks.v2beta2
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudtasks.v2beta2;
using Google.Apis.Cloudtasks.v2beta2.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudtasksv2beta2.Methods
{
  
    public static class TasksSample
    {

        public class TasksListOptionalParms
        {
            /// Requested page size. Fewer tasks than requested might be returned.The maximum page size is 1000. If unspecified, the page size willbe the maximum. Fewer tasks than requested might be returned,even if more tasks exist; useListTasksResponse.next_page_token to determine if more tasksexist.
            public int? PageSize { get; set; }  
            /// A token identifying the page of results to return.To request the first page results, page_token must be empty. Torequest the next page of results, page_token must be the value ofListTasksResponse.next_page_token returned from the previouscall to CloudTasks.ListTasks method.The page token is valid for only 2 hours.
            public string PageToken { get; set; }  
            /// 
Sort order used for the query. The fields supported for sorting
are Task.schedule_time and PullMessage.tag. All results will be
returned in ascending order. The default ordering is by
Task.schedule_time.
            public string OrderBy { get; set; }  
            /// The response_view specifies which subset of the Task will bereturned.By default response_view is Task.View.BASIC; not allinformation is retrieved by default because some data, such aspayloads, might be desirable to return only when needed becauseof its large size or because of the sensitivity of data that itcontains.Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`[Google IAM](/iam/) permission on theTask.name resource.
            public string ResponseView { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the tasks in a queue.By default response_view is Task.View.BASIC; not allinformation is retrieved by default due to performanceconsiderations; ListTasksRequest.response_view controls thesubset of information which is returned. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="parent">Required.The queue name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListTasksResponseResponse</returns>
        public static ListTasksResponse List(CloudtasksService service, string parent, TasksListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Tasks.List(parent);

                // Applying optional parameters to the request.                
                request = (TasksResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a task and adds it to a queue.To add multiple tasks at the same time, use[HTTP batching](/storage/docs/json_api/v1/how-tos/batch)or the batching documentation for your client library, for examplehttps://developers.google.com/api-client-library/python/guide/batch.Tasks cannot be updated after creation; there is no UpdateTask command.* For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),  the maximum task size is 100KB.* For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this  the maximum task size is 1MB. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="parent">Required.The queue name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`The queue must already exist.</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task Create(CloudtasksService service, string parent, CreateTaskRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Make the request.
                return service.Tasks.Create(body, parent).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Create failed.", ex);
            }
        }

        /// <summary>
        /// Cancel a pull task's lease.The lease holder can use this method to cancel a task's leaseby setting Task.schedule_time to now. This will make the taskavailable to be leased to the next caller of CloudTasks.PullTasks. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/cancelLease
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task CancelLease(CloudtasksService service, string name, CancelLeaseRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.CancelLease(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.CancelLease failed.", ex);
            }
        }

        /// <summary>
        /// Forces a task to run now.This command is meant to be used for manual debugging. Forexample, CloudTasks.RunTask can be used to retry a failedtask after a fix has been made or to manually force a task to bedispatched now.When this method is called, Cloud Tasks will dispatch the task to itstarget, even if the queue is Queue.QueueState.PAUSED.The dispatched task is returned. That is, the task that is returnedcontains the Task.task_status after the task is dispatched butbefore the task is received by its target.If Cloud Tasks receives a successful response from the task'shandler, then the task will be deleted; otherwise the task'sTask.schedule_time will be reset to the time thatCloudTasks.RunTask was called plus the retry delay specifiedin the queue and task's RetryConfig.CloudTasks.RunTask returns google.rpc.Code.NOT_FOUND whenit is called on a task that has already succeeded or permanentlyfailed. google.rpc.Code.FAILED_PRECONDITION is returned whenCloudTasks.RunTask is called on task that is dispatched oralready running. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/run
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task Run(CloudtasksService service, string name, RunTaskRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.Run(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Run failed.", ex);
            }
        }

        /// <summary>
        /// Acknowledges a pull task.The lease holder, that is, the entity that received this task ina PullTasksResponse, must call this method to indicate thatthe work associated with the task has finished.The lease holder must acknowledge a task within thePullTasksRequest.lease_duration or the lease will expire andthe task will become ready to be returned in a differentPullTasksResponse. After the task is acknowledged, it willnot be returned by a later CloudTasks.PullTasks,CloudTasks.GetTask, or CloudTasks.ListTasks. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/acknowledge
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Acknowledge(CloudtasksService service, string name, AcknowledgeTaskRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.Acknowledge(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Acknowledge failed.", ex);
            }
        }

        /// <summary>
        /// Renew the current lease of a pull task.The lease holder can use this method to extend the lease by a newduration, starting from now. The new task lease will bereturned in Task.schedule_time. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/renewLease
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task RenewLease(CloudtasksService service, string name, RenewLeaseRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.RenewLease(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.RenewLease failed.", ex);
            }
        }
        public class TasksGetOptionalParms
        {
            /// The response_view specifies which subset of the Task will bereturned.By default response_view is Task.View.BASIC; not allinformation is retrieved by default because some data, such aspayloads, might be desirable to return only when needed becauseof its large size or because of the sensitivity of data that itcontains.Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`[Google IAM](/iam/) permission on theTask.name resource.
            public string ResponseView { get; set; }  
        
        }
 
        /// <summary>
        /// Gets a task. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TaskResponse</returns>
        public static Task Get(CloudtasksService service, string name, TasksGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.Tasks.Get(name);

                // Applying optional parameters to the request.                
                request = (TasksResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Get failed.", ex);
            }
        }

        /// <summary>
        /// Pulls tasks from a pull queue and acquires a lease on them for aspecified PullTasksRequest.lease_duration.This method is invoked by the lease holder to obtain thelease. The lease holder must acknowledge the task viaCloudTasks.AcknowledgeTask after they have performed the workassociated with the task.The payload is intended to store data that the lease holder needsto perform the work associated with the task. To return thepayloads in the PullTasksResponse, setPullTasksRequest.response_view to Task.View.FULL.A maximum of 10 qps of CloudTasks.PullTasks requests are allowed perqueue. google.rpc.Code.RESOURCE_EXHAUSTED is returned when this limitis exceeded. google.rpc.Code.RESOURCE_EXHAUSTED is also returned whenRateLimits.max_tasks_dispatched_per_second is exceeded. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/pull
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The queue name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`</param>
        /// <param name="body">A valid Cloudtasks v2beta2 body.</param>
        /// <returns>PullTasksResponseResponse</returns>
        public static PullTasksResponse Pull(CloudtasksService service, string name, PullTasksRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.Pull(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Pull failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a task.A task can be deleted if it is scheduled or dispatched. A taskcannot be deleted if it has completed successfully or permanentlyfailed. 
        /// Documentation https://developers.google.com/cloudtasks/v2beta2/reference/tasks/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudtasks service.</param>  
        /// <param name="name">Required.The task name. For example:`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(CloudtasksService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Tasks.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Delete failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}