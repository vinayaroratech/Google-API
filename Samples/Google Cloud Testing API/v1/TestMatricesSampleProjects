// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Testing v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Allows developers to run automated tests for their mobile applications on Google infrastructure.
// API Documentation Link https://developers.google.com/cloud-test-lab/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Testing/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Testing.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Testing.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Testing.v1;
using Google.Apis.Testing.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Testingv1.Methods
{
  
    public static class TestMatricesSample
    {


        /// <summary>
        /// Cancels unfinished test executions in a test matrix.This call returns immediately and cancellation proceeds asychronously.If the matrix is already final, this operation will have no effect.May return any of the following canonical error codes:- PERMISSION_DENIED - if the user is not authorized to read project- INVALID_ARGUMENT - if the request is malformed- NOT_FOUND - if the Test Matrix does not exist 
        /// Documentation https://developers.google.com/testing/v1/reference/testMatrices/cancel
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Testing service.</param>  
        /// <param name="projectId">Cloud project that owns the test.</param>
        /// <param name="testMatrixId">Test matrix that will be canceled.</param>
        /// <returns>CancelTestMatrixResponseResponse</returns>
        public static CancelTestMatrixResponse Cancel(TestingService service, string projectId, string testMatrixId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (testMatrixId == null)
                    throw new ArgumentNullException(testMatrixId);

                // Make the request.
                return service.TestMatrices.Cancel(projectId, testMatrixId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request TestMatrices.Cancel failed.", ex);
            }
        }

        /// <summary>
        /// Check the status of a test matrix.May return any of the following canonical error codes:- PERMISSION_DENIED - if the user is not authorized to read project- INVALID_ARGUMENT - if the request is malformed- NOT_FOUND - if the Test Matrix does not exist 
        /// Documentation https://developers.google.com/testing/v1/reference/testMatrices/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Testing service.</param>  
        /// <param name="projectId">Cloud project that owns the test matrix.</param>
        /// <param name="testMatrixId">Unique test matrix id which was assigned by the service.</param>
        /// <returns>TestMatrixResponse</returns>
        public static TestMatrix Get(TestingService service, string projectId, string testMatrixId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (testMatrixId == null)
                    throw new ArgumentNullException(testMatrixId);

                // Make the request.
                return service.TestMatrices.Get(projectId, testMatrixId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request TestMatrices.Get failed.", ex);
            }
        }
        public class TestMatricesCreateOptionalParms
        {
            /// A string id used to detect duplicated requests.Ids are automatically scoped to a project, sousers should ensure the ID is unique per-project.A UUID is recommended.Optional, but strongly recommended.
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Request to run a matrix of tests according to the given specifications.Unsupported environments will be returned in the state UNSUPPORTED.Matrices are limited to at most 200 supported executions.May return any of the following canonical error codes:- PERMISSION_DENIED - if the user is not authorized to write to project- INVALID_ARGUMENT - if the request is malformed or if the matrix expands                     to more than 200 supported executions 
        /// Documentation https://developers.google.com/testing/v1/reference/testMatrices/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Testing service.</param>  
        /// <param name="projectId">The GCE project under which this job will run.</param>
        /// <param name="body">A valid Testing v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TestMatrixResponse</returns>
        public static TestMatrix Create(TestingService service, string projectId, TestMatrix body, TestMatricesCreateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Building the initial request.
                var request = service.TestMatrices.Create(body, projectId);

                // Applying optional parameters to the request.                
                request = (TestMatricesResource.CreateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request TestMatrices.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}