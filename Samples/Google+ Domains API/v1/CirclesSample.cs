// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Plusdomains v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Builds on top of the Google+ platform for Google Apps Domains.
// API Documentation Link https://developers.google.com/+/domains/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Plusdomains/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Plusdomains.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Plusdomains.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Plusdomains.v1;
using Google.Apis.Plusdomains.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Plusdomainsv1.Methods
{
  
    public static class CirclesSample
    {

        public class CirclesAddPeopleOptionalParms
        {
            /// Email of the people to add to the circle. Optional, can be repeated.
            public string Email { get; set; }  
            /// IDs of the people to add to the circle. Optional, can be repeated.
            public string UserId { get; set; }  
        
        }
 
        /// <summary>
        /// Add a person to a circle. Google+ limits certain circle operations, including the number of circle adds. Learn More. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/addPeople
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to add the person to.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>CircleResponse</returns>
        public static Circle AddPeople(PlusdomainsService service, string circleId, CirclesAddPeopleOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Building the initial request.
                var request = service.Circles.AddPeople(circleId);

                // Applying optional parameters to the request.                
                request = (CirclesResource.AddPeopleRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.AddPeople failed.", ex);
            }
        }

        /// <summary>
        /// Get a circle. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to get.</param>
        /// <returns>CircleResponse</returns>
        public static Circle Get(PlusdomainsService service, string circleId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Make the request.
                return service.Circles.Get(circleId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.Get failed.", ex);
            }
        }

        /// <summary>
        /// Create a new circle for the authenticated user. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="userId">The ID of the user to create the circle on behalf of. The value "me" can be used to indicate the authenticated user.</param>
        /// <param name="body">A valid Plusdomains v1 body.</param>
        /// <returns>CircleResponse</returns>
        public static Circle Insert(PlusdomainsService service, string userId, Circle body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.Circles.Insert(body, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.Insert failed.", ex);
            }
        }
        public class CirclesListOptionalParms
        {
            /// The maximum number of circles to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
            public int? MaxResults { get; set; }  
            /// The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List all of the circles for a user. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="userId">The ID of the user to get circles for. The special value "me" can be used to indicate the authenticated user.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>CircleFeedResponse</returns>
        public static CircleFeed List(PlusdomainsService service, string userId, CirclesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Building the initial request.
                var request = service.Circles.List(userId);

                // Applying optional parameters to the request.                
                request = (CirclesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.List failed.", ex);
            }
        }

        /// <summary>
        /// Update a circle's description. This method supports patch semantics. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to update.</param>
        /// <param name="body">A valid Plusdomains v1 body.</param>
        /// <returns>CircleResponse</returns>
        public static Circle Patch(PlusdomainsService service, string circleId, Circle body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Make the request.
                return service.Circles.Patch(body, circleId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Delete a circle. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/remove
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to delete.</param>
        public static void Remove(PlusdomainsService service, string circleId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Make the request.
                 service.Circles.Remove(circleId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.Remove failed.", ex);
            }
        }
        public class CirclesRemovePeopleOptionalParms
        {
            /// Email of the people to add to the circle. Optional, can be repeated.
            public string Email { get; set; }  
            /// IDs of the people to remove from the circle. Optional, can be repeated.
            public string UserId { get; set; }  
        
        }
 
        /// <summary>
        /// Remove a person from a circle. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/removePeople
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to remove the person from.</param>
        /// <param name="optional">Optional paramaters.</param>
        public static void RemovePeople(PlusdomainsService service, string circleId, CirclesRemovePeopleOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Building the initial request.
                var request = service.Circles.RemovePeople(circleId);

                // Applying optional parameters to the request.                
                request = (CirclesResource.RemovePeopleRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                 request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.RemovePeople failed.", ex);
            }
        }

        /// <summary>
        /// Update a circle's description. 
        /// Documentation https://developers.google.com/plusdomains/v1/reference/circles/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Plusdomains service.</param>  
        /// <param name="circleId">The ID of the circle to update.</param>
        /// <param name="body">A valid Plusdomains v1 body.</param>
        /// <returns>CircleResponse</returns>
        public static Circle Update(PlusdomainsService service, string circleId, Circle body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (circleId == null)
                    throw new ArgumentNullException(circleId);

                // Make the request.
                return service.Circles.Update(body, circleId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Circles.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}