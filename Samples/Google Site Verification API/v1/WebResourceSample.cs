// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Siteverification v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Verifies ownership of websites or domains with Google.
// API Documentation Link https://developers.google.com/site-verification/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Siteverification/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Siteverification.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Siteverification.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Siteverification.v1;
using Google.Apis.Siteverification.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Siteverificationv1.Methods
{
  
    public static class WebResourceSample
    {


        /// <summary>
        /// Relinquish ownership of a website or domain. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="id">The id of a verified site or domain.</param>
        public static void Delete(SiteverificationService service, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                 service.WebResource.Delete(id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Get the most current data for a website or domain. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="id">The id of a verified site or domain.</param>
        /// <returns>SiteVerificationWebResourceResourceResponse</returns>
        public static SiteVerificationWebResourceResource Get(SiteverificationService service, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.WebResource.Get(id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.Get failed.", ex);
            }
        }

        /// <summary>
        /// Get a verification token for placing on a website or domain. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/getToken
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="body">A valid Siteverification v1 body.</param>
        /// <returns>SiteVerificationWebResourceGettokenResponseResponse</returns>
        public static SiteVerificationWebResourceGettokenResponse GetToken(SiteverificationService service, SiteVerificationWebResourceGettokenRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.WebResource.GetToken(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.GetToken failed.", ex);
            }
        }

        /// <summary>
        /// Attempt verification of a website or domain. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="verificationMethod">The method to use for verifying a site or domain.</param>
        /// <param name="body">A valid Siteverification v1 body.</param>
        /// <returns>SiteVerificationWebResourceResourceResponse</returns>
        public static SiteVerificationWebResourceResource Insert(SiteverificationService service, string verificationMethod, SiteVerificationWebResourceResource body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (verificationMethod == null)
                    throw new ArgumentNullException(verificationMethod);

                // Make the request.
                return service.WebResource.Insert(body, verificationMethod).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.Insert failed.", ex);
            }
        }

        /// <summary>
        /// Get the list of your verified websites and domains. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <returns>SiteVerificationWebResourceListResponseResponse</returns>
        public static SiteVerificationWebResourceListResponse List(SiteverificationService service)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Make the request.
                return service.WebResource.List().Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.List failed.", ex);
            }
        }

        /// <summary>
        /// Modify the list of owners for your website or domain. This method supports patch semantics. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="id">The id of a verified site or domain.</param>
        /// <param name="body">A valid Siteverification v1 body.</param>
        /// <returns>SiteVerificationWebResourceResourceResponse</returns>
        public static SiteVerificationWebResourceResource Patch(SiteverificationService service, string id, SiteVerificationWebResourceResource body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.WebResource.Patch(body, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Modify the list of owners for your website or domain. 
        /// Documentation https://developers.google.com/siteverification/v1/reference/webResource/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Siteverification service.</param>  
        /// <param name="id">The id of a verified site or domain.</param>
        /// <param name="body">A valid Siteverification v1 body.</param>
        /// <returns>SiteVerificationWebResourceResourceResponse</returns>
        public static SiteVerificationWebResourceResource Update(SiteverificationService service, string id, SiteVerificationWebResourceResource body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.WebResource.Update(body, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request WebResource.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}