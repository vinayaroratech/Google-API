// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Datastore v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.
// API Documentation Link https://cloud.google.com/datastore/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Datastore/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Datastore.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Datastore.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Datastore.v1beta1;
using Google.Apis.Datastore.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Datastorev1beta1.Methods
{
  
    public static class ProjectsSample
    {


        /// <summary>
        /// Exports a copy of all or a subset of entities from Google Cloud Datastoreto another storage system, such as Google Cloud Storage. Recent updates toentities may not be reflected in the export. The export occurs in thebackground and its progress can be monitored and managed via theOperation resource that is created. The output of an export may only beused once the associated operation is done. If an export operation iscancelled before completion it may leave partial data behind in GoogleCloud Storage. 
        /// Documentation https://developers.google.com/datastore/v1beta1/reference/projects/export
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Datastore service.</param>  
        /// <param name="projectId">Project ID against which to make the request.</param>
        /// <param name="body">A valid Datastore v1beta1 body.</param>
        /// <returns>GoogleLongrunningOperationResponse</returns>
        public static GoogleLongrunningOperation Export(DatastoreService service, string projectId, GoogleDatastoreAdminV1beta1ExportEntitiesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Export(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Export failed.", ex);
            }
        }

        /// <summary>
        /// Imports entities into Google Cloud Datastore. Existing entities with thesame key are overwritten. The import occurs in the background and itsprogress can be monitored and managed via the Operation resource that iscreated. If an ImportEntities operation is cancelled, it is possiblethat a subset of the data has already been imported to Cloud Datastore. 
        /// Documentation https://developers.google.com/datastore/v1beta1/reference/projects/import
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Datastore service.</param>  
        /// <param name="projectId">Project ID against which to make the request.</param>
        /// <param name="body">A valid Datastore v1beta1 body.</param>
        /// <returns>GoogleLongrunningOperationResponse</returns>
        public static GoogleLongrunningOperation Import(DatastoreService service, string projectId, GoogleDatastoreAdminV1beta1ImportEntitiesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Import(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Import failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}