// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Fitness v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Stores and accesses user data in the fitness store from apps on any platform.
// API Documentation Link https://developers.google.com/fit/rest/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Fitness/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Fitness.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Fitness.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Fitness.v1;
using Google.Apis.Fitness.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Fitnessv1.Methods
{
  
    public static class DatasetsSample
    {

        public class DatasetsDeleteOptionalParms
        {
            /// The client's current time in milliseconds since epoch.
            public string CurrentTimeMillis { get; set; }  
            /// When the operation was performed on the client.
            public string ModifiedTimeMillis { get; set; }  
        
        }
 
        /// <summary>
        /// Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted. 
        /// Documentation https://developers.google.com/fitness/v1/reference/datasets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Fitness service.</param>  
        /// <param name="userId">Delete a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.</param>
        /// <param name="dataSourceId">The data stream ID of the data source that created the dataset.</param>
        /// <param name="datasetId">Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.</param>
        /// <param name="optional">Optional paramaters.</param>
        public static void Delete(FitnessService service, string userId, string dataSourceId, string datasetId, DatasetsDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (dataSourceId == null)
                    throw new ArgumentNullException(dataSourceId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Datasets.Delete(userId, dataSourceId, datasetId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                 request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Delete failed.", ex);
            }
        }
        public class DatasetsGetOptionalParms
        {
            /// If specified, no more than this many data points will be included in the dataset. If there are more data points in the dataset, nextPageToken will be set in the dataset response.
            public int? Limit { get; set; }  
            /// The continuation token, which is used to page through large datasets. To get the next page of a dataset, set this parameter to the value of nextPageToken from the previous response. Each subsequent call will yield a partial dataset with data point end timestamps that are strictly smaller than those in the previous partial response.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time. 
        /// Documentation https://developers.google.com/fitness/v1/reference/datasets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Fitness service.</param>  
        /// <param name="userId">Retrieve a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.</param>
        /// <param name="dataSourceId">The data stream ID of the data source that created the dataset.</param>
        /// <param name="datasetId">Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Get(FitnessService service, string userId, string dataSourceId, string datasetId, DatasetsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (dataSourceId == null)
                    throw new ArgumentNullException(dataSourceId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Datasets.Get(userId, dataSourceId, datasetId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Get failed.", ex);
            }
        }
        public class DatasetsPatchOptionalParms
        {
            /// The client's current time in milliseconds since epoch. Note that the minStartTimeNs and maxEndTimeNs properties in the request body are in nanoseconds instead of milliseconds.
            public string CurrentTimeMillis { get; set; }  
        
        }
 
        /// <summary>
        /// Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics. 
        /// Documentation https://developers.google.com/fitness/v1/reference/datasets/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Fitness service.</param>  
        /// <param name="userId">Patch a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.</param>
        /// <param name="dataSourceId">The data stream ID of the data source that created the dataset.</param>
        /// <param name="datasetId">Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.</param>
        /// <param name="body">A valid Fitness v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Patch(FitnessService service, string userId, string dataSourceId, string datasetId, Dataset body, DatasetsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (dataSourceId == null)
                    throw new ArgumentNullException(dataSourceId);
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Datasets.Patch(body, userId, dataSourceId, datasetId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Patch failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}