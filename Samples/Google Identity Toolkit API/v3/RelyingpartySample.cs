// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Identitytoolkit v3 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Help the third party sites to implement federated login.
// API Documentation Link https://developers.google.com/identity-toolkit/v3/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Identitytoolkit/v3/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Identitytoolkit.v3/ 
// Install Command: PM>  Install-Package Google.Apis.Identitytoolkit.v3
//
//------------------------------------------------------------------------------  
using Google.Apis.Identitytoolkit.v3;
using Google.Apis.Identitytoolkit.v3.Data;
using System;

namespace GoogleSamplecSharpSample.Identitytoolkitv3.Methods
{
  
    public static class RelyingpartySample
    {


        /// <summary>
        /// Creates the URI used by the IdP to authenticate the user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/createAuthUri
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>CreateAuthUriResponseResponse</returns>
        public static CreateAuthUriResponse CreateAuthUri(IdentitytoolkitService service, IdentitytoolkitRelyingpartyCreateAuthUriRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.CreateAuthUri(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.CreateAuthUri failed.", ex);
            }
        }

        /// <summary>
        /// Delete user account. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/deleteAccount
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>DeleteAccountResponseResponse</returns>
        public static DeleteAccountResponse DeleteAccount(IdentitytoolkitService service, IdentitytoolkitRelyingpartyDeleteAccountRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.DeleteAccount(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.DeleteAccount failed.", ex);
            }
        }

        /// <summary>
        /// Batch download user accounts. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/downloadAccount
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>DownloadAccountResponseResponse</returns>
        public static DownloadAccountResponse DownloadAccount(IdentitytoolkitService service, IdentitytoolkitRelyingpartyDownloadAccountRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.DownloadAccount(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.DownloadAccount failed.", ex);
            }
        }

        /// <summary>
        /// Reset password for a user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/emailLinkSignin
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>EmailLinkSigninResponseResponse</returns>
        public static EmailLinkSigninResponse EmailLinkSignin(IdentitytoolkitService service, IdentitytoolkitRelyingpartyEmailLinkSigninRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.EmailLinkSignin(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.EmailLinkSignin failed.", ex);
            }
        }

        /// <summary>
        /// Returns the account info. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/getAccountInfo
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>GetAccountInfoResponseResponse</returns>
        public static GetAccountInfoResponse GetAccountInfo(IdentitytoolkitService service, IdentitytoolkitRelyingpartyGetAccountInfoRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.GetAccountInfo(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.GetAccountInfo failed.", ex);
            }
        }

        /// <summary>
        /// Get a code for user action confirmation. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/getOobConfirmationCode
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>GetOobConfirmationCodeResponseResponse</returns>
        public static GetOobConfirmationCodeResponse GetOobConfirmationCode(IdentitytoolkitService service, Relyingparty body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.GetOobConfirmationCode(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.GetOobConfirmationCode failed.", ex);
            }
        }
        public class RelyingpartyGetProjectConfigOptionalParms
        {
            /// Delegated GCP project number of the request.
            public string DelegatedProjectNumber { get; set; }  
            /// GCP project number of the request.
            public string ProjectNumber { get; set; }  
        
        }
 
        /// <summary>
        /// Get project configuration. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/getProjectConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>IdentitytoolkitRelyingpartyGetProjectConfigResponseResponse</returns>
        public static IdentitytoolkitRelyingpartyGetProjectConfigResponse GetProjectConfig(IdentitytoolkitService service, RelyingpartyGetProjectConfigOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Relyingparty.GetProjectConfig();

                // Applying optional parameters to the request.                
                request = (RelyingpartyResource.GetProjectConfigRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.GetProjectConfig failed.", ex);
            }
        }

        /// <summary>
        /// Get token signing public key. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/getPublicKeys
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <returns>IdentitytoolkitRelyingpartyGetPublicKeysResponseResponse</returns>
        public static IdentitytoolkitRelyingpartyGetPublicKeysResponse GetPublicKeys(IdentitytoolkitService service)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Make the request.
                return service.Relyingparty.GetPublicKeys().Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.GetPublicKeys failed.", ex);
            }
        }

        /// <summary>
        /// Get recaptcha secure param. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/getRecaptchaParam
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <returns>GetRecaptchaParamResponseResponse</returns>
        public static GetRecaptchaParamResponse GetRecaptchaParam(IdentitytoolkitService service)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Make the request.
                return service.Relyingparty.GetRecaptchaParam().Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.GetRecaptchaParam failed.", ex);
            }
        }

        /// <summary>
        /// Reset password for a user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/resetPassword
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>ResetPasswordResponseResponse</returns>
        public static ResetPasswordResponse ResetPassword(IdentitytoolkitService service, IdentitytoolkitRelyingpartyResetPasswordRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.ResetPassword(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.ResetPassword failed.", ex);
            }
        }

        /// <summary>
        /// Send SMS verification code. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/sendVerificationCode
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>IdentitytoolkitRelyingpartySendVerificationCodeResponseResponse</returns>
        public static IdentitytoolkitRelyingpartySendVerificationCodeResponse SendVerificationCode(IdentitytoolkitService service, IdentitytoolkitRelyingpartySendVerificationCodeRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.SendVerificationCode(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.SendVerificationCode failed.", ex);
            }
        }

        /// <summary>
        /// Set account info for a user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/setAccountInfo
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>SetAccountInfoResponseResponse</returns>
        public static SetAccountInfoResponse SetAccountInfo(IdentitytoolkitService service, IdentitytoolkitRelyingpartySetAccountInfoRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.SetAccountInfo(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.SetAccountInfo failed.", ex);
            }
        }

        /// <summary>
        /// Set project configuration. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/setProjectConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>IdentitytoolkitRelyingpartySetProjectConfigResponseResponse</returns>
        public static IdentitytoolkitRelyingpartySetProjectConfigResponse SetProjectConfig(IdentitytoolkitService service, IdentitytoolkitRelyingpartySetProjectConfigRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.SetProjectConfig(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.SetProjectConfig failed.", ex);
            }
        }

        /// <summary>
        /// Sign out user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/signOutUser
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>IdentitytoolkitRelyingpartySignOutUserResponseResponse</returns>
        public static IdentitytoolkitRelyingpartySignOutUserResponse SignOutUser(IdentitytoolkitService service, IdentitytoolkitRelyingpartySignOutUserRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.SignOutUser(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.SignOutUser failed.", ex);
            }
        }

        /// <summary>
        /// Signup new user. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/signupNewUser
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>SignupNewUserResponseResponse</returns>
        public static SignupNewUserResponse SignupNewUser(IdentitytoolkitService service, IdentitytoolkitRelyingpartySignupNewUserRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.SignupNewUser(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.SignupNewUser failed.", ex);
            }
        }

        /// <summary>
        /// Batch upload existing user accounts. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/uploadAccount
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>UploadAccountResponseResponse</returns>
        public static UploadAccountResponse UploadAccount(IdentitytoolkitService service, IdentitytoolkitRelyingpartyUploadAccountRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.UploadAccount(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.UploadAccount failed.", ex);
            }
        }

        /// <summary>
        /// Verifies the assertion returned by the IdP. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/verifyAssertion
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>VerifyAssertionResponseResponse</returns>
        public static VerifyAssertionResponse VerifyAssertion(IdentitytoolkitService service, IdentitytoolkitRelyingpartyVerifyAssertionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.VerifyAssertion(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.VerifyAssertion failed.", ex);
            }
        }

        /// <summary>
        /// Verifies the developer asserted ID token. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/verifyCustomToken
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>VerifyCustomTokenResponseResponse</returns>
        public static VerifyCustomTokenResponse VerifyCustomToken(IdentitytoolkitService service, IdentitytoolkitRelyingpartyVerifyCustomTokenRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.VerifyCustomToken(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.VerifyCustomToken failed.", ex);
            }
        }

        /// <summary>
        /// Verifies the user entered password. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/verifyPassword
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>VerifyPasswordResponseResponse</returns>
        public static VerifyPasswordResponse VerifyPassword(IdentitytoolkitService service, IdentitytoolkitRelyingpartyVerifyPasswordRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.VerifyPassword(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.VerifyPassword failed.", ex);
            }
        }

        /// <summary>
        /// Verifies ownership of a phone number and creates/updates the user account accordingly. 
        /// Documentation https://developers.google.com/identitytoolkit/v3/reference/relyingparty/verifyPhoneNumber
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Identitytoolkit service.</param>  
        /// <param name="body">A valid Identitytoolkit v3 body.</param>
        /// <returns>IdentitytoolkitRelyingpartyVerifyPhoneNumberResponseResponse</returns>
        public static IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse VerifyPhoneNumber(IdentitytoolkitService service, IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Relyingparty.VerifyPhoneNumber(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Relyingparty.VerifyPhoneNumber failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}