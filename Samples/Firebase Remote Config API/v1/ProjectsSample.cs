// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Firebaseremoteconfig v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Firebase Remote Config API allows the 3P clients to manage Remote Config conditions and parameters for Firebase applications.
// API Documentation Link https://firebase.google.com/docs/remote-config/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Firebaseremoteconfig/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Firebaseremoteconfig.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Firebaseremoteconfig.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Firebaseremoteconfig.v1;
using Google.Apis.Firebaseremoteconfig.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Firebaseremoteconfigv1.Methods
{
  
    public static class ProjectsSample
    {

        public class ProjectsUpdateRemoteConfigOptionalParms
        {
            /// Optional. Defaults to <code>false</code> (UpdateRemoteConfig call shouldupdate the backend if there are no validation/interal errors). May be setto <code>true</code> to indicate that, should no validation errors occur,the call should return a "200 OK" instead of performing the update. Notethat other error messages (500 Internal Error, 412 Version Mismatch, etc)may still result after flipping to <code>false</code>, even if getting a"200 OK" when calling with <code>true</code>.
            public bool? ValidateOnly { get; set; }  
        
        }
 
        /// <summary>
        /// Update a RemoteConfig. We treat this as an always-existingresource (when it is not found in our data store, we treat it as version0, a template with zero conditions and zero parameters). Hence there areno Create or Delete operations. Returns the updated template whensuccessful (and the updated eTag as a response header), or an error ifthings go wrong.Possible error messages:* VALIDATION_ERROR (HTTP status 400) with additional details if thetemplate being passed in can not be validated.* AUTHENTICATION_ERROR (HTTP status 401) if the request can not beauthenticate (e.g. no access token, or invalid access token).* AUTHORIZATION_ERROR (HTTP status 403) if the request can not beauthorized (e.g. the user has no access to the specified project id).* VERSION_MISMATCH (HTTP status 412) when trying to update when theexpected eTag (passed in via the "If-match" header) is not specified, oris specified but does does not match the current eTag.* Internal error (HTTP status 500) for Database problems or other internalerrors. 
        /// Documentation https://developers.google.com/firebaseremoteconfig/v1/reference/projects/updateRemoteConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaseremoteconfig service.</param>  
        /// <param name="project">The GMP project identifier. Required.See note at the beginning of this file regarding project ids.</param>
        /// <param name="body">A valid Firebaseremoteconfig v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RemoteConfigResponse</returns>
        public static RemoteConfig UpdateRemoteConfig(FirebaseremoteconfigService service, string project, RemoteConfig body, ProjectsUpdateRemoteConfigOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (project == null)
                    throw new ArgumentNullException(project);

                // Building the initial request.
                var request = service.Projects.UpdateRemoteConfig(body, project);

                // Applying optional parameters to the request.                
                request = (ProjectsResource.UpdateRemoteConfigRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.UpdateRemoteConfig failed.", ex);
            }
        }

        /// <summary>
        /// Get the latest version Remote Configuration for a project.Returns the RemoteConfig as the payload, and also the eTag as aresponse header. 
        /// Documentation https://developers.google.com/firebaseremoteconfig/v1/reference/projects/getRemoteConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaseremoteconfig service.</param>  
        /// <param name="project">The GMP project identifier. Required.See note at the beginning of this file regarding project ids.</param>
        /// <returns>RemoteConfigResponse</returns>
        public static RemoteConfig GetRemoteConfig(FirebaseremoteconfigService service, string project)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);

                // Make the request.
                return service.Projects.GetRemoteConfig(project).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.GetRemoteConfig failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}