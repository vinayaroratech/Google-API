// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Pubsub v1beta2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Provides reliable, many-to-many, asynchronous messaging between applications.
// API Documentation Link https://cloud.google.com/pubsub/docs
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Pubsub/v1beta2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Pubsub.v1beta2/ 
// Install Command: PM>  Install-Package Google.Apis.Pubsub.v1beta2
//
//------------------------------------------------------------------------------  
using Google.Apis.Pubsub.v1beta2;
using Google.Apis.Pubsub.v1beta2.Data;
using System;

namespace GoogleSamplecSharpSample.Pubsubv1beta2.Methods
{
  
    public static class SubscriptionsSample
    {


        /// <summary>
        /// Acknowledges the messages associated with the `ack_ids` in the`AcknowledgeRequest`. The Pub/Sub system can remove the relevant messagesfrom the subscription.Acknowledging a message whose ack deadline has expired may succeed,but such a message may be redelivered later. Acknowledging a message morethan once will not result in an error. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/acknowledge
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The subscription whose message is being acknowledged.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Acknowledge(PubsubService service, string subscription, AcknowledgeRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Acknowledge(body, subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Acknowledge failed.", ex);
            }
        }

        /// <summary>
        /// Modifies the ack deadline for a specific message. This method is usefulto indicate that more time is needed to process a message by thesubscriber, or to make the message available for redelivery if theprocessing was interrupted. Note that this does not modify thesubscription-level `ackDeadlineSeconds` used for subsequent messages. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/modifyAckDeadline
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The name of the subscription.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty ModifyAckDeadline(PubsubService service, string subscription, ModifyAckDeadlineRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.ModifyAckDeadline(body, subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ModifyAckDeadline failed.", ex);
            }
        }

        /// <summary>
        /// Gets the access control policy for a resource.Returns an empty policy if the resource exists and does not have a policyset. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/getIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy is being requested.See the operation documentation for the appropriate value for this field.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy GetIamPolicy(PubsubService service, string resource)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Subscriptions.GetIamPolicy(resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.GetIamPolicy failed.", ex);
            }
        }

        /// <summary>
        /// Gets the configuration details of a subscription. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The name of the subscription to get.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Get(PubsubService service, string subscription)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Get(subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Get failed.", ex);
            }
        }

        /// <summary>
        /// Returns permissions that a caller has on the specified resource.If the resource does not exist, this will return an empty set ofpermissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-awareUIs and command-line tools, not for authorization checking. This operationmay "fail open" without warning. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/testIamPermissions
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy detail is being requested.See the operation documentation for the appropriate value for this field.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>TestIamPermissionsResponseResponse</returns>
        public static TestIamPermissionsResponse TestIamPermissions(PubsubService service, string resource, TestIamPermissionsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Subscriptions.TestIamPermissions(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.TestIamPermissions failed.", ex);
            }
        }

        /// <summary>
        /// Modifies the `PushConfig` for a specified subscription.This may be used to change a push subscription to a pull one (signified byan empty `PushConfig`) or vice versa, or change the endpoint URL and otherattributes of a push subscription. Messages will accumulate for deliverycontinuously through the call regardless of changes to the `PushConfig`. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/modifyPushConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The name of the subscription.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty ModifyPushConfig(PubsubService service, string subscription, ModifyPushConfigRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.ModifyPushConfig(body, subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ModifyPushConfig failed.", ex);
            }
        }

        /// <summary>
        /// Pulls messages from the server. Returns an empty list if there are nomessages available in the backlog. The server may return `UNAVAILABLE` ifthere are too many concurrent pull requests pending for the givensubscription. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/pull
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The subscription from which messages should be pulled.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>PullResponseResponse</returns>
        public static PullResponse Pull(PubsubService service, string subscription, PullRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Pull(body, subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Pull failed.", ex);
            }
        }

        /// <summary>
        /// Deletes an existing subscription. All pending messages in the subscriptionare immediately dropped. Calls to `Pull` after deletion will return`NOT_FOUND`. After a subscription is deleted, a new one may be created withthe same name, but the new one has no association with the oldsubscription, or its topic unless the same topic is specified. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="subscription">The subscription to delete.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(PubsubService service, string subscription)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Delete(subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Delete failed.", ex);
            }
        }
        public class SubscriptionsListOptionalParms
        {
            /// The value returned by the last `ListSubscriptionsResponse`; indicates thatthis is a continuation of a prior `ListSubscriptions` call, and that thesystem should return the next page of data.
            public string PageToken { get; set; }  
            /// Maximum number of subscriptions to return.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Lists matching subscriptions. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="project">The name of the cloud project that subscriptions belong to.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListSubscriptionsResponseResponse</returns>
        public static ListSubscriptionsResponse List(PubsubService service, string project, SubscriptionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (project == null)
                    throw new ArgumentNullException(project);

                // Building the initial request.
                var request = service.Subscriptions.List(project);

                // Applying optional parameters to the request.                
                request = (SubscriptionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.List failed.", ex);
            }
        }

        /// <summary>
        /// Sets the access control policy on the specified resource. Replaces anyexisting policy. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/setIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy is being specified.See the operation documentation for the appropriate value for this field.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy SetIamPolicy(PubsubService service, string resource, SetIamPolicyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Subscriptions.SetIamPolicy(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.SetIamPolicy failed.", ex);
            }
        }

        /// <summary>
        /// Creates a subscription to a given topic.If the subscription already exists, returns `ALREADY_EXISTS`.If the corresponding topic doesn't exist, returns `NOT_FOUND`.If the name is not provided in the request, the server will assign a randomname for this subscription on the same project as the topic. Note thatfor REST API requests, you must specify a name. 
        /// Documentation https://developers.google.com/pubsub/v1beta2/reference/subscriptions/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Pubsub service.</param>  
        /// <param name="name">The name of the subscription. It must have the format`"projects/{project}/subscriptions/{subscription}"`. `{subscription}` muststart with a letter, and contain only letters (`[A-Za-z]`), numbers(`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),plus (`+`) or percent signs (`%`). It must be between 3 and 255 charactersin length, and it must not start with `"goog"`.</param>
        /// <param name="body">A valid Pubsub v1beta2 body.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Create(PubsubService service, string name, Subscription body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Subscriptions.Create(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}