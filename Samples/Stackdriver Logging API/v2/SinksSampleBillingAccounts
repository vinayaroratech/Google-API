// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Logging v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Writes log entries and manages your Stackdriver Logging configuration.
// API Documentation Link https://cloud.google.com/logging/docs/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Logging/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Logging.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Logging.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Logging.v2;
using Google.Apis.Logging.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Loggingv2.Methods
{
  
    public static class SinksSample
    {


        /// <summary>
        /// Gets a sink. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="sinkName">Required. The resource name of the sink:"projects/[PROJECT_ID]/sinks/[SINK_ID]""organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]""folders/[FOLDER_ID]/sinks/[SINK_ID]"Example: "projects/my-project-id/sinks/my-sink-id".</param>
        /// <returns>LogSinkResponse</returns>
        public static LogSink Get(LoggingService service, string sinkName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (sinkName == null)
                    throw new ArgumentNullException(sinkName);

                // Make the request.
                return service.Sinks.Get(sinkName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.Get failed.", ex);
            }
        }
        public class SinksPatchOptionalParms
        {
            /// Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmaskExample: updateMask=filter.
            public string UpdateMask { get; set; }  
            /// Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field:If the old and new values of this field are both false or both true, then there is no change to the sink's writer_identity.If the old value is false and the new value is true, then writer_identity is changed to a unique service account.It is an error if the old value is true and the new value is set to false or defaulted to false.
            public bool? UniqueWriterIdentity { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter. The updated sink might also have a new writer_identity; see the unique_writer_identity field. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="sinkName">Required. The full resource name of the sink to update, including the parent resource and the sink identifier:"projects/[PROJECT_ID]/sinks/[SINK_ID]""organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]""folders/[FOLDER_ID]/sinks/[SINK_ID]"Example: "projects/my-project-id/sinks/my-sink-id".</param>
        /// <param name="body">A valid Logging v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LogSinkResponse</returns>
        public static LogSink Patch(LoggingService service, string sinkName, LogSink body, SinksPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (sinkName == null)
                    throw new ArgumentNullException(sinkName);

                // Building the initial request.
                var request = service.Sinks.Patch(body, sinkName);

                // Applying optional parameters to the request.                
                request = (SinksResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.Patch failed.", ex);
            }
        }
        public class SinksUpdateOptionalParms
        {
            /// Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmaskExample: updateMask=filter.
            public string UpdateMask { get; set; }  
            /// Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field:If the old and new values of this field are both false or both true, then there is no change to the sink's writer_identity.If the old value is false and the new value is true, then writer_identity is changed to a unique service account.It is an error if the old value is true and the new value is set to false or defaulted to false.
            public bool? UniqueWriterIdentity { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter. The updated sink might also have a new writer_identity; see the unique_writer_identity field. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="sinkName">Required. The full resource name of the sink to update, including the parent resource and the sink identifier:"projects/[PROJECT_ID]/sinks/[SINK_ID]""organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]""folders/[FOLDER_ID]/sinks/[SINK_ID]"Example: "projects/my-project-id/sinks/my-sink-id".</param>
        /// <param name="body">A valid Logging v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LogSinkResponse</returns>
        public static LogSink Update(LoggingService service, string sinkName, LogSink body, SinksUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (sinkName == null)
                    throw new ArgumentNullException(sinkName);

                // Building the initial request.
                var request = service.Sinks.Update(body, sinkName);

                // Applying optional parameters to the request.                
                request = (SinksResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.Update failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="sinkName">Required. The full resource name of the sink to delete, including the parent resource and the sink identifier:"projects/[PROJECT_ID]/sinks/[SINK_ID]""organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]""folders/[FOLDER_ID]/sinks/[SINK_ID]"Example: "projects/my-project-id/sinks/my-sink-id".</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(LoggingService service, string sinkName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (sinkName == null)
                    throw new ArgumentNullException(sinkName);

                // Make the request.
                return service.Sinks.Delete(sinkName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.Delete failed.", ex);
            }
        }
        public class SinksListOptionalParms
        {
            /// Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
            public string PageToken { get; set; }  
            /// Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Lists sinks. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="parent">Required. The parent resource whose sinks are to be listed:"projects/[PROJECT_ID]""organizations/[ORGANIZATION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]""folders/[FOLDER_ID]"</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListSinksResponseResponse</returns>
        public static ListSinksResponse List(LoggingService service, string parent, SinksListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Sinks.List(parent);

                // Applying optional parameters to the request.                
                request = (SinksResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.List failed.", ex);
            }
        }
        public class SinksCreateOptionalParms
        {
            /// Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink's parent is a project, then the value returned as writer_identity is the same group or service account used by Stackdriver Logging before the addition of writer identities to this API. The sink's destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
            public bool? UniqueWriterIdentity { get; set; }  
        
        }
 
        /// <summary>
        /// Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. 
        /// Documentation https://developers.google.com/logging/v2/reference/sinks/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="parent">Required. The resource in which to create the sink:"projects/[PROJECT_ID]""organizations/[ORGANIZATION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]""folders/[FOLDER_ID]"Examples: "projects/my-logging-project", "organizations/123456789".</param>
        /// <param name="body">A valid Logging v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LogSinkResponse</returns>
        public static LogSink Create(LoggingService service, string parent, LogSink body, SinksCreateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Sinks.Create(body, parent);

                // Applying optional parameters to the request.                
                request = (SinksResource.CreateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Sinks.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}