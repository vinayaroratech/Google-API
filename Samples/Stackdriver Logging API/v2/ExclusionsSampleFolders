// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Logging v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Writes log entries and manages your Stackdriver Logging configuration.
// API Documentation Link https://cloud.google.com/logging/docs/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Logging/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Logging.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Logging.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Logging.v2;
using Google.Apis.Logging.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Loggingv2.Methods
{
  
    public static class ExclusionsSample
    {


        /// <summary>
        /// Deletes an exclusion. 
        /// Documentation https://developers.google.com/logging/v2/reference/exclusions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="name">Required. The resource name of an existing exclusion to delete:"projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]""organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]""folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"Example: "projects/my-project-id/exclusions/my-exclusion-id".</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(LoggingService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Exclusions.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Exclusions.Delete failed.", ex);
            }
        }
        public class ExclusionsPatchOptionalParms
        {
            /// Required. A nonempty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of "filter,description".
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Changes one or more properties of an existing exclusion. 
        /// Documentation https://developers.google.com/logging/v2/reference/exclusions/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="name">Required. The resource name of the exclusion to update:"projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]""organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]""folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"Example: "projects/my-project-id/exclusions/my-exclusion-id".</param>
        /// <param name="body">A valid Logging v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LogExclusionResponse</returns>
        public static LogExclusion Patch(LoggingService service, string name, LogExclusion body, ExclusionsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.Exclusions.Patch(body, name);

                // Applying optional parameters to the request.                
                request = (ExclusionsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Exclusions.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Gets the description of an exclusion. 
        /// Documentation https://developers.google.com/logging/v2/reference/exclusions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="name">Required. The resource name of an existing exclusion:"projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]""organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]""folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"Example: "projects/my-project-id/exclusions/my-exclusion-id".</param>
        /// <returns>LogExclusionResponse</returns>
        public static LogExclusion Get(LoggingService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Exclusions.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Exclusions.Get failed.", ex);
            }
        }
        public class ExclusionsListOptionalParms
        {
            /// Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
            public int? PageSize { get; set; }  
            /// Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all the exclusions in a parent resource. 
        /// Documentation https://developers.google.com/logging/v2/reference/exclusions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="parent">Required. The parent resource whose exclusions are to be listed."projects/[PROJECT_ID]""organizations/[ORGANIZATION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]""folders/[FOLDER_ID]"</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListExclusionsResponseResponse</returns>
        public static ListExclusionsResponse List(LoggingService service, string parent, ExclusionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Exclusions.List(parent);

                // Applying optional parameters to the request.                
                request = (ExclusionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Exclusions.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. 
        /// Documentation https://developers.google.com/logging/v2/reference/exclusions/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Logging service.</param>  
        /// <param name="parent">Required. The parent resource in which to create the exclusion:"projects/[PROJECT_ID]""organizations/[ORGANIZATION_ID]""billingAccounts/[BILLING_ACCOUNT_ID]""folders/[FOLDER_ID]"Examples: "projects/my-logging-project", "organizations/123456789".</param>
        /// <param name="body">A valid Logging v2 body.</param>
        /// <returns>LogExclusionResponse</returns>
        public static LogExclusion Create(LoggingService service, string parent, LogExclusion body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Make the request.
                return service.Exclusions.Create(body, parent).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Exclusions.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}