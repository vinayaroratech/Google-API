// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Classroom v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages classes, rosters, and invitations in Google Classroom.
// API Documentation Link https://developers.google.com/classroom/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Classroom/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Classroom.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Classroom.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Classroom.v1;
using Google.Apis.Classroom.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Classroomv1.Methods
{
  
    public static class AnnouncementsSample
    {


        /// <summary>
        /// Deletes an announcement.This request must be made by the Developer Console project of the[OAuth client ID](https://support.google.com/cloud/answer/6158849) used tocreate the corresponding announcement item.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting developer project did not createthe corresponding announcement, if the requesting user is not permittedto delete the requested course or for access errors.* `FAILED_PRECONDITION` if the requested announcement has already beendeleted.* `NOT_FOUND` if no course exists with the requested ID. 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="id">Identifier of the announcement to delete.This identifier is a Classroom-assigned identifier.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(ClassroomService service, string courseId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Announcements.Delete(courseId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.Delete failed.", ex);
            }
        }
        public class AnnouncementsListOptionalParms
        {
            /// Restriction on the `state` of announcements returned.If this argument is left unspecified, the default value is `PUBLISHED`.
            public string AnnouncementStates { get; set; }  
            /// nextPageTokenvalue returned from a previouslist call,indicating that the subsequent page of results should be returned.The list requestmust be otherwise identical to the one that resulted in this token.
            public string PageToken { get; set; }  
            /// Optional sort ordering for results. A comma-separated list of fields withan optional sort direction keyword. Supported field is `updateTime`.Supported direction keywords are `asc` and `desc`.If not specified, `updateTime desc` is the default behavior.Examples: `updateTime asc`, `updateTime`
            public string OrderBy { get; set; }  
            /// Maximum number of items to return. Zero or unspecified indicates that theserver may assign a maximum.The server may return fewer than the specified number of results.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Returns a list of announcements that the requester is permitted to view.Course students may only view `PUBLISHED` announcements. Course teachersand domain administrators may view all announcements.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting user is not permitted to accessthe requested course or for access errors.* `INVALID_ARGUMENT` if the request is malformed.* `NOT_FOUND` if the requested course does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListAnnouncementsResponseResponse</returns>
        public static ListAnnouncementsResponse List(ClassroomService service, string courseId, AnnouncementsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);

                // Building the initial request.
                var request = service.Announcements.List(courseId);

                // Applying optional parameters to the request.                
                request = (AnnouncementsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates an announcement.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting user is not permitted to access therequested course, create announcements in the requested course, share aDrive attachment, or for access errors.* `INVALID_ARGUMENT` if the request is malformed.* `NOT_FOUND` if the requested course does not exist.* `FAILED_PRECONDITION` for the following request error:    * AttachmentNotVisible 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="body">A valid Classroom v1 body.</param>
        /// <returns>AnnouncementResponse</returns>
        public static Announcement Create(ClassroomService service, string courseId, Announcement body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);

                // Make the request.
                return service.Announcements.Create(body, courseId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.Create failed.", ex);
            }
        }

        /// <summary>
        /// Modifies assignee mode and options of an announcement.Only a teacher of the course that contains the announcement maycall this method.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting user is not permitted to access therequested course or course work or for access errors.* `INVALID_ARGUMENT` if the request is malformed.* `NOT_FOUND` if the requested course or course work does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/modifyAssignees
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="id">Identifier of the announcement.</param>
        /// <param name="body">A valid Classroom v1 body.</param>
        /// <returns>AnnouncementResponse</returns>
        public static Announcement ModifyAssignees(ClassroomService service, string courseId, string id, ModifyAnnouncementAssigneesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Announcements.ModifyAssignees(body, courseId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.ModifyAssignees failed.", ex);
            }
        }
        public class AnnouncementsPatchOptionalParms
        {
            /// Mask that identifies which fields on the announcement to update.This field is required to do an update. The update fails if invalidfields are specified. If a field supports empty values, it can be clearedby specifying it in the update mask and not in the Announcement object. Ifa field that does not support empty values is included in the update maskand not set in the Announcement object, an `INVALID_ARGUMENT` error will bereturned.The following fields may be specified by teachers:* `text`* `state`* `scheduled_time`
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates one or more fields of an announcement.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting developer project did not createthe corresponding announcement or for access errors.* `INVALID_ARGUMENT` if the request is malformed.* `FAILED_PRECONDITION` if the requested announcement has already beendeleted.* `NOT_FOUND` if the requested course or announcement does not exist 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="id">Identifier of the announcement.</param>
        /// <param name="body">A valid Classroom v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AnnouncementResponse</returns>
        public static Announcement Patch(ClassroomService service, string courseId, string id, Announcement body, AnnouncementsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Building the initial request.
                var request = service.Announcements.Patch(body, courseId, id);

                // Applying optional parameters to the request.                
                request = (AnnouncementsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Returns an announcement.This method returns the following error codes:* `PERMISSION_DENIED` if the requesting user is not permitted to access therequested course or announcement, or for access errors.* `INVALID_ARGUMENT` if the request is malformed.* `NOT_FOUND` if the requested course or announcement does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/announcements/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Classroom service.</param>  
        /// <param name="courseId">Identifier of the course.This identifier can be either the Classroom-assigned identifier or analias.</param>
        /// <param name="id">Identifier of the announcement.</param>
        /// <returns>AnnouncementResponse</returns>
        public static Announcement Get(ClassroomService service, string courseId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Announcements.Get(courseId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Announcements.Get failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}