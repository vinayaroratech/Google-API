// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Licensing v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Views and manages licenses for your domain.
// API Documentation Link https://developers.google.com/google-apps/licensing/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Licensing/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Licensing.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Licensing.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Licensing.v1;
using Google.Apis.Licensing.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Licensingv1.Methods
{
  
    public static class LicenseAssignmentsSample
    {


        /// <summary>
        /// Revoke License. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku</param>
        /// <param name="userId">email id or unique Id of the user</param>
        public static void Delete(LicensingService service, string productId, string skuId, string userId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                 service.LicenseAssignments.Delete(productId, skuId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Get license assignment of a particular product and sku for a user 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku</param>
        /// <param name="userId">email id or unique Id of the user</param>
        /// <returns>LicenseAssignmentResponse</returns>
        public static LicenseAssignment Get(LicensingService service, string productId, string skuId, string userId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.LicenseAssignments.Get(productId, skuId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.Get failed.", ex);
            }
        }

        /// <summary>
        /// Assign License. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku</param>
        /// <param name="body">A valid Licensing v1 body.</param>
        /// <returns>LicenseAssignmentResponse</returns>
        public static LicenseAssignment Insert(LicensingService service, string productId, string skuId, LicenseAssignmentInsert body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);

                // Make the request.
                return service.LicenseAssignments.Insert(body, productId, skuId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.Insert failed.", ex);
            }
        }
        public class LicenseAssignmentsListForProductOptionalParms
        {
            /// Maximum number of campaigns to return at one time. Must be positive. Optional. Default value is 100.
            public int? MaxResults { get; set; }  
            /// Token to fetch the next page.Optional. By default server will return first page
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List license assignments for given product of the customer. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/listForProduct
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="customerId">CustomerId represents the customer for whom licenseassignments are queried</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LicenseAssignmentListResponse</returns>
        public static LicenseAssignmentList ListForProduct(LicensingService service, string productId, string customerId, LicenseAssignmentsListForProductOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (customerId == null)
                    throw new ArgumentNullException(customerId);

                // Building the initial request.
                var request = service.LicenseAssignments.ListForProduct(productId, customerId);

                // Applying optional parameters to the request.                
                request = (LicenseAssignmentsResource.ListForProductRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.ListForProduct failed.", ex);
            }
        }
        public class LicenseAssignmentsListForProductAndSkuOptionalParms
        {
            /// Maximum number of campaigns to return at one time. Must be positive. Optional. Default value is 100.
            public int? MaxResults { get; set; }  
            /// Token to fetch the next page.Optional. By default server will return first page
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List license assignments for given product and sku of the customer. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/listForProductAndSku
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku</param>
        /// <param name="customerId">CustomerId represents the customer for whom licenseassignments are queried</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>LicenseAssignmentListResponse</returns>
        public static LicenseAssignmentList ListForProductAndSku(LicensingService service, string productId, string skuId, string customerId, LicenseAssignmentsListForProductAndSkuOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);
                if (customerId == null)
                    throw new ArgumentNullException(customerId);

                // Building the initial request.
                var request = service.LicenseAssignments.ListForProductAndSku(productId, skuId, customerId);

                // Applying optional parameters to the request.                
                request = (LicenseAssignmentsResource.ListForProductAndSkuRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.ListForProductAndSku failed.", ex);
            }
        }

        /// <summary>
        /// Assign License. This method supports patch semantics. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku for which license would be revoked</param>
        /// <param name="userId">email id or unique Id of the user</param>
        /// <param name="body">A valid Licensing v1 body.</param>
        /// <returns>LicenseAssignmentResponse</returns>
        public static LicenseAssignment Patch(LicensingService service, string productId, string skuId, string userId, LicenseAssignment body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.LicenseAssignments.Patch(body, productId, skuId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Assign License. 
        /// Documentation https://developers.google.com/licensing/v1/reference/licenseAssignments/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Licensing service.</param>  
        /// <param name="productId">Name for product</param>
        /// <param name="skuId">Name for sku for which license would be revoked</param>
        /// <param name="userId">email id or unique Id of the user</param>
        /// <param name="body">A valid Licensing v1 body.</param>
        /// <returns>LicenseAssignmentResponse</returns>
        public static LicenseAssignment Update(LicensingService service, string productId, string skuId, string userId, LicenseAssignment body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (productId == null)
                    throw new ArgumentNullException(productId);
                if (skuId == null)
                    throw new ArgumentNullException(skuId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.LicenseAssignments.Update(body, productId, skuId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request LicenseAssignments.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}