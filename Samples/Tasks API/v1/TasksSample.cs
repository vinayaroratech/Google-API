// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Tasks v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Lets you manage your tasks and task lists.
// API Documentation Link https://developers.google.com/google-apps/tasks/firstapp
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Tasks/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Tasks.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Tasks.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Tasks.v1;
using Google.Apis.Tasks.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Tasksv1.Methods
{
  
    public static class TasksSample
    {


        /// <summary>
        /// Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/clear
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        public static void Clear(TasksService service, string tasklist)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);

                // Make the request.
                 service.Tasks.Clear(tasklist).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Clear failed.", ex);
            }
        }

        /// <summary>
        /// Deletes the specified task from the task list. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="task">Task identifier.</param>
        public static void Delete(TasksService service, string tasklist, string task)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);
                if (task == null)
                    throw new ArgumentNullException(task);

                // Make the request.
                 service.Tasks.Delete(tasklist, task).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Returns the specified task. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="task">Task identifier.</param>
        /// <returns>TaskResponse</returns>
        public static Task Get(TasksService service, string tasklist, string task)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);
                if (task == null)
                    throw new ArgumentNullException(task);

                // Make the request.
                return service.Tasks.Get(tasklist, task).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Get failed.", ex);
            }
        }
        public class TasksInsertOptionalParms
        {
            /// Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional.
            public string Parent { get; set; }  
            /// Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional.
            public string Previous { get; set; }  
        
        }
 
        /// <summary>
        /// Creates a new task on the specified task list. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="body">A valid Tasks v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TaskResponse</returns>
        public static Task Insert(TasksService service, string tasklist, Task body, TasksInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);

                // Building the initial request.
                var request = service.Tasks.Insert(body, tasklist);

                // Applying optional parameters to the request.                
                request = (TasksResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Insert failed.", ex);
            }
        }
        public class TasksListOptionalParms
        {
            /// Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.
            public string CompletedMax { get; set; }  
            /// Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.
            public string CompletedMin { get; set; }  
            /// Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.
            public string DueMax { get; set; }  
            /// Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.
            public string DueMin { get; set; }  
            /// Maximum number of task lists returned on one page. Optional. The default is 100.
            public string MaxResults { get; set; }  
            /// Token specifying the result page to return. Optional.
            public string PageToken { get; set; }  
            /// Flag indicating whether completed tasks are returned in the result. Optional. The default is True.
            public bool? ShowCompleted { get; set; }  
            /// Flag indicating whether deleted tasks are returned in the result. Optional. The default is False.
            public bool? ShowDeleted { get; set; }  
            /// Flag indicating whether hidden tasks are returned in the result. Optional. The default is False.
            public bool? ShowHidden { get; set; }  
            /// Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.
            public string UpdatedMin { get; set; }  
        
        }
 
        /// <summary>
        /// Returns all tasks in the specified task list. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TasksResponse</returns>
        public static Tasks List(TasksService service, string tasklist, TasksListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);

                // Building the initial request.
                var request = service.Tasks.List(tasklist);

                // Applying optional parameters to the request.                
                request = (TasksResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.List failed.", ex);
            }
        }
        public class TasksMoveOptionalParms
        {
            /// New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional.
            public string Parent { get; set; }  
            /// New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional.
            public string Previous { get; set; }  
        
        }
 
        /// <summary>
        /// Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/move
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="task">Task identifier.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TaskResponse</returns>
        public static Task Move(TasksService service, string tasklist, string task, TasksMoveOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);
                if (task == null)
                    throw new ArgumentNullException(task);

                // Building the initial request.
                var request = service.Tasks.Move(tasklist, task);

                // Applying optional parameters to the request.                
                request = (TasksResource.MoveRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Move failed.", ex);
            }
        }

        /// <summary>
        /// Updates the specified task. This method supports patch semantics. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="task">Task identifier.</param>
        /// <param name="body">A valid Tasks v1 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task Patch(TasksService service, string tasklist, string task, Task body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);
                if (task == null)
                    throw new ArgumentNullException(task);

                // Make the request.
                return service.Tasks.Patch(body, tasklist, task).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Updates the specified task. 
        /// Documentation https://developers.google.com/tasks/v1/reference/tasks/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Tasks service.</param>  
        /// <param name="tasklist">Task list identifier.</param>
        /// <param name="task">Task identifier.</param>
        /// <param name="body">A valid Tasks v1 body.</param>
        /// <returns>TaskResponse</returns>
        public static Task Update(TasksService service, string tasklist, string task, Task body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (tasklist == null)
                    throw new ArgumentNullException(tasklist);
                if (task == null)
                    throw new ArgumentNullException(task);

                // Make the request.
                return service.Tasks.Update(body, tasklist, task).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Tasks.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}