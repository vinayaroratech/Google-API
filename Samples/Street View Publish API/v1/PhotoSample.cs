// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Streetviewpublish v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images.
// API Documentation Link https://developers.google.com/streetview/publish/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Streetviewpublish/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Streetviewpublish.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Streetviewpublish.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Streetviewpublish.v1;
using Google.Apis.Streetviewpublish.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Streetviewpublishv1.Methods
{
  
    public static class PhotoSample
    {


        /// <summary>
        /// Deletes a Photo and its metadata.This method returns the following error codes:* google.rpc.Code.PERMISSION_DENIED if the requesting user did notcreate the requested photo.* google.rpc.Code.NOT_FOUND if the photo ID does not exist. 
        /// Documentation https://developers.google.com/streetviewpublish/v1/reference/photo/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Streetviewpublish service.</param>  
        /// <param name="photoId">Required. ID of the Photo.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(StreetviewpublishService service, string photoId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (photoId == null)
                    throw new ArgumentNullException(photoId);

                // Make the request.
                return service.Photo.Delete(photoId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Photo.Delete failed.", ex);
            }
        }
        public class PhotoGetOptionalParms
        {
            /// Specifies if a download URL for the photo bytes should be returned in thePhoto response.
            public string View { get; set; }  
        
        }
 
        /// <summary>
        /// Gets the metadata of the specifiedPhoto.This method returns the following error codes:* google.rpc.Code.PERMISSION_DENIED if the requesting user did notcreate the requested Photo.* google.rpc.Code.NOT_FOUND if the requestedPhoto does not exist. 
        /// Documentation https://developers.google.com/streetviewpublish/v1/reference/photo/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Streetviewpublish service.</param>  
        /// <param name="photoId">Required. ID of the Photo.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>PhotoResponse</returns>
        public static Photo Get(StreetviewpublishService service, string photoId, PhotoGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (photoId == null)
                    throw new ArgumentNullException(photoId);

                // Building the initial request.
                var request = service.Photo.Get(photoId);

                // Applying optional parameters to the request.                
                request = (PhotoResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Photo.Get failed.", ex);
            }
        }
        public class PhotoUpdateOptionalParms
        {
            /// Mask that identifies fields on the photo metadata to update.If not present, the old Photometadata will be entirely replaced with thenew Photo metadata in this request.The update fails if invalid fields are specified. Multiple fields can bespecified in a comma-delimited list.The following fields are valid:* `pose.heading`* `pose.latLngPair`* `pose.pitch`* `pose.roll`* `pose.level`* `pose.altitude`* `connections`* `places`<aside class="note"><b>Note:</b> Repeated fields inupdateMaskmean the entire set of repeated values will be replaced with the newcontents. For example, ifupdateMaskcontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,all connections will be removed.</aside>
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates the metadata of a Photo, suchas pose, place association, connections, etc. Changing the pixels of aphoto is not supported.Only the fields specified in theupdateMaskfield are used. If `updateMask` is not present, the update applies to allfields.<aside class="note"><b>Note:</b> To updatePose.altitude,Pose.latLngPair has to befilled as well. Otherwise, the request will fail.</aside>This method returns the following error codes:* google.rpc.Code.PERMISSION_DENIED if the requesting user did notcreate the requested photo.* google.rpc.Code.INVALID_ARGUMENT if the request is malformed.* google.rpc.Code.NOT_FOUND if the requested photo does not exist. 
        /// Documentation https://developers.google.com/streetviewpublish/v1/reference/photo/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Streetviewpublish service.</param>  
        /// <param name="id">Required. A unique identifier for a photo.</param>
        /// <param name="body">A valid Streetviewpublish v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>PhotoResponse</returns>
        public static Photo Update(StreetviewpublishService service, string id, Photo body, PhotoUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (id == null)
                    throw new ArgumentNullException(id);

                // Building the initial request.
                var request = service.Photo.Update(body, id);

                // Applying optional parameters to the request.                
                request = (PhotoResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Photo.Update failed.", ex);
            }
        }

        /// <summary>
        /// After the client finishes uploading the photo with the returnedUploadRef,CreatePhotopublishes the uploaded Photo toStreet View on Google Maps.Currently, the only way to set heading, pitch, and roll in CreatePhoto isthrough the [Photo Sphere XMPmetadata](https://developers.google.com/streetview/spherical-metadata) inthe photo bytes. The `pose.heading`, `pose.pitch`, `pose.roll`,`pose.altitude`, and `pose.level` fields in Pose are ignored forCreatePhoto.This method returns the following error codes:* google.rpc.Code.INVALID_ARGUMENT if the request is malformed.* google.rpc.Code.NOT_FOUND if the upload reference does not exist.* google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached thestorage limit. 
        /// Documentation https://developers.google.com/streetviewpublish/v1/reference/photo/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Streetviewpublish service.</param>  
        /// <param name="body">A valid Streetviewpublish v1 body.</param>
        /// <returns>PhotoResponse</returns>
        public static Photo Create(StreetviewpublishService service, Photo body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Photo.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Photo.Create failed.", ex);
            }
        }

        /// <summary>
        /// Creates an upload session to start uploading photo bytes. The upload URL ofthe returned UploadRef is used toupload the bytes for the Photo.In addition to the photo requirements shown inhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,the photo must also meet the following requirements:* Photo Sphere XMP metadata must be included in the photo medadata. Seehttps://developers.google.com/streetview/spherical-metadata for therequired fields.* The pixel size of the photo must meet the size requirements listed inhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, andthe photo must be a full 360 horizontally.After the upload is complete, theUploadRef is used withCreatePhototo create the Photo object entry. 
        /// Documentation https://developers.google.com/streetviewpublish/v1/reference/photo/startUpload
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Streetviewpublish service.</param>  
        /// <param name="body">A valid Streetviewpublish v1 body.</param>
        /// <returns>UploadRefResponse</returns>
        public static UploadRef StartUpload(StreetviewpublishService service, Empty body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Photo.StartUpload(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Photo.StartUpload failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}