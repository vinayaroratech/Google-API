// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Servicemanagement v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
// API Documentation Link https://cloud.google.com/service-management/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Servicemanagement/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Servicemanagement.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Servicemanagement.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Servicemanagement.v1;
using Google.Apis.Servicemanagement.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Servicemanagementv1.Methods
{
  
    public static class RolloutsSample
    {


        /// <summary>
        /// Gets a service configuration rollout. 
        /// Documentation https://developers.google.com/servicemanagement/v1/reference/rollouts/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Servicemanagement service.</param>  
        /// <param name="serviceName">The name of the service.  See the [overview](/service-management/overview)for naming requirements.  For example: `example.googleapis.com`.</param>
        /// <param name="rolloutId">The id of the rollout resource.</param>
        /// <returns>RolloutResponse</returns>
        public static Rollout Get(ServicemanagementService service, string serviceName, string rolloutId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (serviceName == null)
                    throw new ArgumentNullException(serviceName);
                if (rolloutId == null)
                    throw new ArgumentNullException(rolloutId);

                // Make the request.
                return service.Rollouts.Get(serviceName, rolloutId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rollouts.Get failed.", ex);
            }
        }
        public class RolloutsListOptionalParms
        {
            /// The max number of items to include in the response list.
            public int? PageSize { get; set; }  
            /// Use `filter` to return subset of rollouts.The following filters are supported:  -- To limit the results to only those in     [status](google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',     use filter='status=SUCCESS'  -- To limit the results to those in     [status](google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'     or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
            public string Filter { get; set; }  
            /// The token of the page to retrieve.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the history of the service configuration rollouts for a managedservice, from the newest to the oldest. 
        /// Documentation https://developers.google.com/servicemanagement/v1/reference/rollouts/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Servicemanagement service.</param>  
        /// <param name="serviceName">The name of the service.  See the [overview](/service-management/overview)for naming requirements.  For example: `example.googleapis.com`.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListServiceRolloutsResponseResponse</returns>
        public static ListServiceRolloutsResponse List(ServicemanagementService service, string serviceName, RolloutsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (serviceName == null)
                    throw new ArgumentNullException(serviceName);

                // Building the initial request.
                var request = service.Rollouts.List(serviceName);

                // Applying optional parameters to the request.                
                request = (RolloutsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rollouts.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new service configuration rollout. Based on rollout, theGoogle Service Management will roll out the service configurations todifferent backend services. For example, the logging configuration will bepushed to Google Cloud Logging.Please note that any previous pending and running Rollouts and associatedOperations will be automatically cancelled so that the latest Rollout willnot be blocked by previous Rollouts.Operation<response: Rollout> 
        /// Documentation https://developers.google.com/servicemanagement/v1/reference/rollouts/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Servicemanagement service.</param>  
        /// <param name="serviceName">The name of the service.  See the [overview](/service-management/overview)for naming requirements.  For example: `example.googleapis.com`.</param>
        /// <param name="body">A valid Servicemanagement v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(ServicemanagementService service, string serviceName, Rollout body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (serviceName == null)
                    throw new ArgumentNullException(serviceName);

                // Make the request.
                return service.Rollouts.Create(body, serviceName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rollouts.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}