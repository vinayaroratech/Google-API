// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Replicapool v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
// API Documentation Link https://developers.google.com/compute/docs/replica-pool/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Replicapool/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Replicapool.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Replicapool.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Replicapool.v1beta1;
using Google.Apis.Replicapool.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Replicapoolv1beta1.Methods
{
  
    public static class PoolsSample
    {


        /// <summary>
        /// Deletes a replica pool. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this replica pool.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="poolName">The name of the replica pool for this request.</param>
        /// <param name="body">A valid Replicapool v1beta1 body.</param>
        public static void Delete(ReplicapoolService service, string projectName, string zone, string poolName, PoolsDeleteRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (poolName == null)
                    throw new ArgumentNullException(poolName);

                // Make the request.
                 service.Pools.Delete(body, projectName, zone, poolName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Gets information about a single replica pool. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this replica pool.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="poolName">The name of the replica pool for this request.</param>
        /// <returns>PoolResponse</returns>
        public static Pool Get(ReplicapoolService service, string projectName, string zone, string poolName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (poolName == null)
                    throw new ArgumentNullException(poolName);

                // Make the request.
                return service.Pools.Get(projectName, zone, poolName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.Get failed.", ex);
            }
        }

        /// <summary>
        /// Inserts a new replica pool. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this replica pool.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="body">A valid Replicapool v1beta1 body.</param>
        /// <returns>PoolResponse</returns>
        public static Pool Insert(ReplicapoolService service, string projectName, string zone, Pool body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);

                // Make the request.
                return service.Pools.Insert(body, projectName, zone).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.Insert failed.", ex);
            }
        }
        public class PoolsListOptionalParms
        {
            /// Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
            public int? MaxResults { get; set; }  
            /// Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// List all replica pools. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this request.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>PoolsListResponseResponse</returns>
        public static PoolsListResponse List(ReplicapoolService service, string projectName, string zone, PoolsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);

                // Building the initial request.
                var request = service.Pools.List(projectName, zone);

                // Applying optional parameters to the request.                
                request = (PoolsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.List failed.", ex);
            }
        }
        public class PoolsResizeOptionalParms
        {
            /// The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted.
            public int? NumReplicas { get; set; }  
        
        }
 
        /// <summary>
        /// Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/resize
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this replica pool.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="poolName">The name of the replica pool for this request.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>PoolResponse</returns>
        public static Pool Resize(ReplicapoolService service, string projectName, string zone, string poolName, PoolsResizeOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (poolName == null)
                    throw new ArgumentNullException(poolName);

                // Building the initial request.
                var request = service.Pools.Resize(projectName, zone, poolName);

                // Applying optional parameters to the request.                
                request = (PoolsResource.ResizeRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.Resize failed.", ex);
            }
        }

        /// <summary>
        /// Update the template used by the pool. 
        /// Documentation https://developers.google.com/replicapool/v1beta1/reference/pools/updatetemplate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Replicapool service.</param>  
        /// <param name="projectName">The project ID for this replica pool.</param>
        /// <param name="zone">The zone for this replica pool.</param>
        /// <param name="poolName">The name of the replica pool for this request.</param>
        /// <param name="body">A valid Replicapool v1beta1 body.</param>
        public static void Updatetemplate(ReplicapoolService service, string projectName, string zone, string poolName, Template body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectName == null)
                    throw new ArgumentNullException(projectName);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (poolName == null)
                    throw new ArgumentNullException(poolName);

                // Make the request.
                 service.Pools.Updatetemplate(body, projectName, zone, poolName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pools.Updatetemplate failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}