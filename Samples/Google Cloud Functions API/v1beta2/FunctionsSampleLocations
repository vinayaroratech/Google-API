// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudfunctions v1beta2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: API for managing lightweight user-provided functions executed in response to events.
// API Documentation Link https://cloud.google.com/functions
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudfunctions/v1beta2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudfunctions.v1beta2/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudfunctions.v1beta2
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudfunctions.v1beta2;
using Google.Apis.Cloudfunctions.v1beta2.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudfunctionsv1beta2.Methods
{
  
    public static class FunctionsSample
    {


        /// <summary>
        /// Updates existing function. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="name">The name of the function to be updated.</param>
        /// <param name="body">A valid Cloudfunctions v1beta2 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Update(CloudfunctionsService service, string name, CloudFunction body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Functions.Update(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.Update failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a function with the given name from the specified project. If thegiven function is used by some trigger, the trigger will be updated toremove this function. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="name">The name of the function which should be deleted.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(CloudfunctionsService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Functions.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.Delete failed.", ex);
            }
        }
        public class FunctionsListOptionalParms
        {
            /// Maximum number of functions to return per call.
            public int? PageSize { get; set; }  
            /// The value returned by the last`ListFunctionsResponse`; indicates thatthis is a continuation of a prior `ListFunctions` call, and that thesystem should return the next page of data.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Returns a list of functions that belong to the requested project. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="location">The project and location from which the function should be listed,specified in the format `projects/*/locations/*`If you want to list functions in all locations, use "-" in place of alocation.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListFunctionsResponseResponse</returns>
        public static ListFunctionsResponse List(CloudfunctionsService service, string location, FunctionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (location == null)
                    throw new ArgumentNullException(location);

                // Building the initial request.
                var request = service.Functions.List(location);

                // Applying optional parameters to the request.                
                request = (FunctionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.List failed.", ex);
            }
        }

        /// <summary>
        /// Invokes synchronously deployed function. To be used for testing, verylimited traffic allowed. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/call
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="name">The name of the function to be called.</param>
        /// <param name="body">A valid Cloudfunctions v1beta2 body.</param>
        /// <returns>CallFunctionResponseResponse</returns>
        public static CallFunctionResponse Call(CloudfunctionsService service, string name, CallFunctionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Functions.Call(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.Call failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new function. If a function with the given name already exists inthe specified project, the long running operation will return`ALREADY_EXISTS` error. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="location">The project and location in which the function should be created, specifiedin the format `projects/*/locations/*`</param>
        /// <param name="body">A valid Cloudfunctions v1beta2 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(CloudfunctionsService service, string location, CloudFunction body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (location == null)
                    throw new ArgumentNullException(location);

                // Make the request.
                return service.Functions.Create(body, location).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.Create failed.", ex);
            }
        }

        /// <summary>
        /// Returns a function with the given name from the requested project. 
        /// Documentation https://developers.google.com/cloudfunctions/v1beta2/reference/functions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudfunctions service.</param>  
        /// <param name="name">The name of the function which details should be obtained.</param>
        /// <returns>CloudFunctionResponse</returns>
        public static CloudFunction Get(CloudfunctionsService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Functions.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Functions.Get failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}