// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Iam v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls.
// API Documentation Link https://cloud.google.com/iam/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Iam/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Iam.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Iam.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Iam.v1;
using Google.Apis.Iam.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Iamv1.Methods
{
  
    public static class KeysSample
    {


        /// <summary>
        /// Deletes a ServiceAccountKey. 
        /// Documentation https://developers.google.com/iam/v1/reference/keys/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Iam service.</param>  
        /// <param name="name">The resource name of the service account key in the following format:`projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.Using `-` as a wildcard for the `PROJECT_ID` will infer the project fromthe account. The `ACCOUNT` value can be the `email` address or the`unique_id` of the service account.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(IamService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Keys.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Keys.Delete failed.", ex);
            }
        }
        public class KeysGetOptionalParms
        {
            /// The output format of the public key requested.X509_PEM is the default output format.
            public string PublicKeyType { get; set; }  
        
        }
 
        /// <summary>
        /// Gets the ServiceAccountKeyby key id. 
        /// Documentation https://developers.google.com/iam/v1/reference/keys/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Iam service.</param>  
        /// <param name="name">The resource name of the service account key in the following format:`projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.Using `-` as a wildcard for the `PROJECT_ID` will infer the project fromthe account. The `ACCOUNT` value can be the `email` address or the`unique_id` of the service account.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ServiceAccountKeyResponse</returns>
        public static ServiceAccountKey Get(IamService service, string name, KeysGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.Keys.Get(name);

                // Applying optional parameters to the request.                
                request = (KeysResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Keys.Get failed.", ex);
            }
        }
        public class KeysListOptionalParms
        {
            /// Filters the types of keys the user wants to include in the listresponse. Duplicate key types are not allowed. If no key typeis provided, all keys are returned.
            public string KeyTypes { get; set; }  
        
        }
 
        /// <summary>
        /// Lists ServiceAccountKeys. 
        /// Documentation https://developers.google.com/iam/v1/reference/keys/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Iam service.</param>  
        /// <param name="name">The resource name of the service account in the following format:`projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.Using `-` as a wildcard for the `PROJECT_ID`, will infer the project fromthe account. The `ACCOUNT` value can be the `email` address or the`unique_id` of the service account.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListServiceAccountKeysResponseResponse</returns>
        public static ListServiceAccountKeysResponse List(IamService service, string name, KeysListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.Keys.List(name);

                // Applying optional parameters to the request.                
                request = (KeysResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Keys.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a ServiceAccountKeyand returns it. 
        /// Documentation https://developers.google.com/iam/v1/reference/keys/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Iam service.</param>  
        /// <param name="name">The resource name of the service account in the following format:`projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.Using `-` as a wildcard for the `PROJECT_ID` will infer the project fromthe account. The `ACCOUNT` value can be the `email` address or the`unique_id` of the service account.</param>
        /// <param name="body">A valid Iam v1 body.</param>
        /// <returns>ServiceAccountKeyResponse</returns>
        public static ServiceAccountKey Create(IamService service, string name, CreateServiceAccountKeyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Keys.Create(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Keys.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}