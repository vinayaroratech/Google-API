// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Dataproc v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages Hadoop-based clusters and jobs on Google Cloud Platform.
// API Documentation Link https://cloud.google.com/dataproc/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Dataproc/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Dataproc.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Dataproc.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Dataproc.v1;
using Google.Apis.Dataproc.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Dataprocv1.Methods
{
  
    public static class ClustersSample
    {

        public class ClustersPatchOptionalParms
        {
            /// Required. Specifies the path, relative to Cluster, of the field to update. For example, to change the number of workers in a cluster to 5, the update_mask parameter would be specified as config.worker_config.num_instances, and the PATCH request body would specify the new value, as follows:{  "config":{    "workerConfig":{      "numInstances":"5"    }  }}Similarly, to change the number of preemptible workers in a cluster to 5, the update_mask parameter would be config.secondary_worker_config.num_instances, and the PATCH request body would be set as follows:{  "config":{    "secondaryWorkerConfig":{      "numInstances":"5"    }  }}<strong>Note:</strong> Currently, only the following fields can be updated:<table>  <tbody>  <tr>  <td><strong>Mask</strong></td>  <td><strong>Purpose</strong></td>  </tr>  <tr>  <td><strong><em>labels</em></strong></td>  <td>Update labels</td>  </tr>  <tr>  <td><strong><em>config.worker_config.num_instances</em></strong></td>  <td>Resize primary worker group</td>  </tr>  <tr>  <td><strong><em>config.secondary_worker_config.num_instances</em></strong></td>  <td>Resize secondary worker group</td>  </tr>  </tbody>  </table>
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="clusterName">Required. The cluster name.</param>
        /// <param name="body">A valid Dataproc v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Patch(DataprocService service, string projectId, string region, string clusterName, Cluster body, ClustersPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Building the initial request.
                var request = service.Clusters.Patch(body, projectId, region, clusterName);

                // Applying optional parameters to the request.                
                request = (ClustersResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Gets the resource representation for a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="clusterName">Required. The cluster name.</param>
        /// <returns>ClusterResponse</returns>
        public static Cluster Get(DataprocService service, string projectId, string region, string clusterName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Get(projectId, region, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Get failed.", ex);
            }
        }

        /// <summary>
        /// Gets cluster diagnostic information. After the operation completes, the Operation.response field contains DiagnoseClusterOutputLocation. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/diagnose
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="clusterName">Required. The cluster name.</param>
        /// <param name="body">A valid Dataproc v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Diagnose(DataprocService service, string projectId, string region, string clusterName, DiagnoseClusterRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Diagnose(body, projectId, region, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Diagnose failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="clusterName">Required. The cluster name.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(DataprocService service, string projectId, string region, string clusterName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Delete(projectId, region, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Delete failed.", ex);
            }
        }
        public class ClustersListOptionalParms
        {
            /// Optional. A filter constraining the clusters to list. Filters are case-sensitive and have the following syntax:field = value AND field = value ...where field is one of status.state, clusterName, or labels.[KEY], and [KEY] is a label key. value can be * to match all values. status.state can be one of the following: ACTIVE, INACTIVE, CREATING, RUNNING, ERROR, DELETING, or UPDATING. ACTIVE contains the CREATING, UPDATING, and RUNNING states. INACTIVE contains the DELETING and ERROR states. clusterName is the name of the cluster provided at creation time. Only the logical AND operator is supported; space-separated items are treated as having an implicit AND operator.Example filter:status.state = ACTIVE AND clusterName = mycluster AND labels.env = staging AND labels.starred = *
            public string Filter { get; set; }  
            /// Optional. The standard List page token.
            public string PageToken { get; set; }  
            /// Optional. The standard List page size.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all regions/{region}/clusters in a project. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListClustersResponseResponse</returns>
        public static ListClustersResponse List(DataprocService service, string projectId, string region, ClustersListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);

                // Building the initial request.
                var request = service.Clusters.List(projectId, region);

                // Applying optional parameters to the request.                
                request = (ClustersResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1/reference/clusters/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="region">Required. The Cloud Dataproc region in which to handle the request.</param>
        /// <param name="body">A valid Dataproc v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(DataprocService service, string projectId, string region, Cluster body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (region == null)
                    throw new ArgumentNullException(region);

                // Make the request.
                return service.Clusters.Create(body, projectId, region).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}