// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Games v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The API for Google Play Game Services.
// API Documentation Link https://developers.google.com/games/services/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Games/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Games.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Games.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Games.v1;
using Google.Apis.Games.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Gamesv1.Methods
{
  
    public static class RoomsSample
    {

        public class RoomsCreateOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Create a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="body">A valid Games v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomResponse</returns>
        public static Room Create(GamesService service, RoomCreateRequest body, RoomsCreateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Building the initial request.
                var request = service.Rooms.Create(body);

                // Applying optional parameters to the request.                
                request = (RoomsResource.CreateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Create failed.", ex);
            }
        }
        public class RoomsDeclineOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Decline an invitation to join a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/decline
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomResponse</returns>
        public static Room Decline(GamesService service, string roomId, RoomsDeclineOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.Decline(roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.DeclineRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Decline failed.", ex);
            }
        }
        public class RoomsDismissOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
        
        }
 
        /// <summary>
        /// Dismiss an invitation to join a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/dismiss
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="optional">Optional paramaters.</param>
        public static void Dismiss(GamesService service, string roomId, RoomsDismissOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.Dismiss(roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.DismissRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                 request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Dismiss failed.", ex);
            }
        }
        public class RoomsGetOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Get the data for a room. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomResponse</returns>
        public static Room Get(GamesService service, string roomId, RoomsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.Get(roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Get failed.", ex);
            }
        }
        public class RoomsJoinOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Join a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/join
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="body">A valid Games v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomResponse</returns>
        public static Room Join(GamesService service, string roomId, RoomJoinRequest body, RoomsJoinOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.Join(body, roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.JoinRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Join failed.", ex);
            }
        }
        public class RoomsLeaveOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Leave a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/leave
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="body">A valid Games v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomResponse</returns>
        public static Room Leave(GamesService service, string roomId, RoomLeaveRequest body, RoomsLeaveOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.Leave(body, roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.LeaveRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.Leave failed.", ex);
            }
        }
        public class RoomsListOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
            /// The maximum number of rooms to return in the response, used for paging. For any response, the actual number of rooms to return may be less than the specified maxResults.
            public int? MaxResults { get; set; }  
            /// The token returned by the previous request.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Returns invitations to join rooms. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomListResponse</returns>
        public static RoomList List(GamesService service, RoomsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Rooms.List();

                // Applying optional parameters to the request.                
                request = (RoomsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.List failed.", ex);
            }
        }
        public class RoomsReportStatusOptionalParms
        {
            /// The last-seen mutation timestamp.
            public string ConsistencyToken { get; set; }  
            /// The preferred language to use for strings returned by this method.
            public string Language { get; set; }  
        
        }
 
        /// <summary>
        /// Updates sent by a client reporting the status of peers in a room. For internal use by the Games SDK only. Calling this method directly is unsupported. 
        /// Documentation https://developers.google.com/games/v1/reference/rooms/reportStatus
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Games service.</param>  
        /// <param name="roomId">The ID of the room.</param>
        /// <param name="body">A valid Games v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>RoomStatusResponse</returns>
        public static RoomStatus ReportStatus(GamesService service, string roomId, RoomP2PStatuses body, RoomsReportStatusOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (roomId == null)
                    throw new ArgumentNullException(roomId);

                // Building the initial request.
                var request = service.Rooms.ReportStatus(body, roomId);

                // Applying optional parameters to the request.                
                request = (RoomsResource.ReportStatusRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rooms.ReportStatus failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}