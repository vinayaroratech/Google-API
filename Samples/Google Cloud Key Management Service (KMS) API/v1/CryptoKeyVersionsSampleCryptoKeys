// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudkms v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages encryption for your cloud services the same way you do on-premises. You can generate, use, rotate, and destroy AES256 encryption keys.
// API Documentation Link https://cloud.google.com/kms/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudkms/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudkms.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudkms.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudkms.v1;
using Google.Apis.Cloudkms.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudkmsv1.Methods
{
  
    public static class CryptoKeyVersionsSample
    {


        /// <summary>
        /// Restore a CryptoKeyVersion in theDESTROY_SCHEDULED,state.Upon restoration of the CryptoKeyVersion, statewill be set to DISABLED,and destroy_time will be cleared. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/restore
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="name">The resource name of the CryptoKeyVersion to restore.</param>
        /// <param name="body">A valid Cloudkms v1 body.</param>
        /// <returns>CryptoKeyVersionResponse</returns>
        public static CryptoKeyVersion Restore(CloudkmsService service, string name, RestoreCryptoKeyVersionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.CryptoKeyVersions.Restore(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.Restore failed.", ex);
            }
        }
        public class CryptoKeyVersionsPatchOptionalParms
        {
            /// Required list of fields to be updated in this request.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Update a CryptoKeyVersion's metadata.state may be changed betweenENABLED andDISABLED using thismethod. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion tomove between other states. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="name">Output only. The resource name for this CryptoKeyVersion in the format`projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.</param>
        /// <param name="body">A valid Cloudkms v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>CryptoKeyVersionResponse</returns>
        public static CryptoKeyVersion Patch(CloudkmsService service, string name, CryptoKeyVersion body, CryptoKeyVersionsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.CryptoKeyVersions.Patch(body, name);

                // Applying optional parameters to the request.                
                request = (CryptoKeyVersionsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Returns metadata for a given CryptoKeyVersion. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="name">The name of the CryptoKeyVersion to get.</param>
        /// <returns>CryptoKeyVersionResponse</returns>
        public static CryptoKeyVersion Get(CloudkmsService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.CryptoKeyVersions.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.Get failed.", ex);
            }
        }
        public class CryptoKeyVersionsListOptionalParms
        {
            /// Optional limit on the number of CryptoKeyVersions toinclude in the response. Further CryptoKeyVersions cansubsequently be obtained by including theListCryptoKeyVersionsResponse.next_page_token in a subsequent request.If unspecified, the server will pick an appropriate default.
            public int? PageSize { get; set; }  
            /// Optional pagination token, returned earlier viaListCryptoKeyVersionsResponse.next_page_token.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists CryptoKeyVersions. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="parent">Required. The resource name of the CryptoKey to list, in the format`projects/*/locations/*/keyRings/*/cryptoKeys/*`.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListCryptoKeyVersionsResponseResponse</returns>
        public static ListCryptoKeyVersionsResponse List(CloudkmsService service, string parent, CryptoKeyVersionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.CryptoKeyVersions.List(parent);

                // Applying optional parameters to the request.                
                request = (CryptoKeyVersionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.List failed.", ex);
            }
        }

        /// <summary>
        /// Create a new CryptoKeyVersion in a CryptoKey.The server will assign the next sequential id. If unset,state will be set toENABLED. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="parent">Required. The name of the CryptoKey associated withthe CryptoKeyVersions.</param>
        /// <param name="body">A valid Cloudkms v1 body.</param>
        /// <returns>CryptoKeyVersionResponse</returns>
        public static CryptoKeyVersion Create(CloudkmsService service, string parent, CryptoKeyVersion body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Make the request.
                return service.CryptoKeyVersions.Create(body, parent).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.Create failed.", ex);
            }
        }

        /// <summary>
        /// Schedule a CryptoKeyVersion for destruction.Upon calling this method, CryptoKeyVersion.state will be set toDESTROY_SCHEDULEDand destroy_time will be set to a time 24hours in the future, at which point the statewill be changed toDESTROYED, and the keymaterial will be irrevocably destroyed.Before the destroy_time is reached,RestoreCryptoKeyVersion may be called to reverse the process. 
        /// Documentation https://developers.google.com/cloudkms/v1/reference/cryptoKeyVersions/destroy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudkms service.</param>  
        /// <param name="name">The resource name of the CryptoKeyVersion to destroy.</param>
        /// <param name="body">A valid Cloudkms v1 body.</param>
        /// <returns>CryptoKeyVersionResponse</returns>
        public static CryptoKeyVersion Destroy(CloudkmsService service, string name, DestroyCryptoKeyVersionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.CryptoKeyVersions.Destroy(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request CryptoKeyVersions.Destroy failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}