// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Serviceuser v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
// API Documentation Link https://cloud.google.com/service-management/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Serviceuser/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Serviceuser.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Serviceuser.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Serviceuser.v1;
using Google.Apis.Serviceuser.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Serviceuserv1.Methods
{
  
    public static class ServicesSample
    {


        /// <summary>
        /// Enable a service so it can be used with a project.See [Cloud Auth Guide](https://cloud.google.com/docs/authentication) formore information.Operation<response: google.protobuf.Empty> 
        /// Documentation https://developers.google.com/serviceuser/v1/reference/services/enable
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Serviceuser service.</param>  
        /// <param name="name">Name of the consumer and the service to enable for that consumer.A valid path would be:- /v1/projects/my-project/services/servicemanagement.googleapis.com:enable</param>
        /// <param name="body">A valid Serviceuser v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Enable(ServiceuserService service, string name, EnableServiceRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Services.Enable(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Services.Enable failed.", ex);
            }
        }
        public class ServicesListOptionalParms
        {
            /// Token identifying which result to start with; returned by a previous listcall.
            public string PageToken { get; set; }  
            /// Requested size of the next page of data.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// List enabled services for the specified consumer. 
        /// Documentation https://developers.google.com/serviceuser/v1/reference/services/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Serviceuser service.</param>  
        /// <param name="parent">List enabled services for the specified parent.An example valid parent would be:- projects/my-project</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListEnabledServicesResponseResponse</returns>
        public static ListEnabledServicesResponse List(ServiceuserService service, string parent, ServicesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Services.List(parent);

                // Applying optional parameters to the request.                
                request = (ServicesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Services.List failed.", ex);
            }
        }

        /// <summary>
        /// Disable a service so it can no longer be used with aproject. This prevents unintended usage that may cause unexpected billingcharges or security leaks.Operation<response: google.protobuf.Empty> 
        /// Documentation https://developers.google.com/serviceuser/v1/reference/services/disable
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Serviceuser service.</param>  
        /// <param name="name">Name of the consumer and the service to disable for that consumer.The Service User implementation accepts the following forms for consumer:- "project:<project_id>"A valid path would be:- /v1/projects/my-project/services/servicemanagement.googleapis.com:disable</param>
        /// <param name="body">A valid Serviceuser v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Disable(ServiceuserService service, string name, DisableServiceRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Services.Disable(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Services.Disable failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}