// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Adexchangebuyer v1.4 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
// API Documentation Link https://developers.google.com/ad-exchange/buyer-rest
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Adexchangebuyer/v1_4/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Adexchangebuyer.v1_4/ 
// Install Command: PM>  Install-Package Google.Apis.Adexchangebuyer.v1_4
//
//------------------------------------------------------------------------------  
using Google.Apis.Adexchangebuyer.v1_4;
using Google.Apis.Adexchangebuyer.v1_4.Data;
using System;

namespace GoogleSamplecSharpSample.Adexchangebuyerv1_4.Methods
{
  
    public static class ProposalsSample
    {


        /// <summary>
        /// Get a proposal given its id 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="proposalId">Id of the proposal to retrieve.</param>
        /// <returns>ProposalResponse</returns>
        public static Proposal Get(AdexchangebuyerService service, string proposalId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (proposalId == null)
                    throw new ArgumentNullException(proposalId);

                // Make the request.
                return service.Proposals.Get(proposalId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Get failed.", ex);
            }
        }

        /// <summary>
        /// Create the given list of proposals 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="body">A valid Adexchangebuyer v1.4 body.</param>
        /// <returns>CreateOrdersResponseResponse</returns>
        public static CreateOrdersResponse Insert(AdexchangebuyerService service, CreateOrdersRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Proposals.Insert(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Insert failed.", ex);
            }
        }

        /// <summary>
        /// Update the given proposal. This method supports patch semantics. 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="proposalId">The proposal id to update.</param>
        /// <param name="revisionNumber">The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.</param>
        /// <param name="updateAction">The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.</param>
        /// <param name="body">A valid Adexchangebuyer v1.4 body.</param>
        /// <returns>ProposalResponse</returns>
        public static Proposal Patch(AdexchangebuyerService service, string proposalId, string revisionNumber, string updateAction, Proposal body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (proposalId == null)
                    throw new ArgumentNullException(proposalId);
                if (revisionNumber == null)
                    throw new ArgumentNullException(revisionNumber);
                if (updateAction == null)
                    throw new ArgumentNullException(updateAction);

                // Make the request.
                return service.Proposals.Patch(body, proposalId, revisionNumber, updateAction).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Patch failed.", ex);
            }
        }
        public class ProposalsSearchOptionalParms
        {
            /// Query string to retrieve specific proposals.
            public string PqlQuery { get; set; }  
        
        }
 
        /// <summary>
        /// Search for proposals using pql query 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/search
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>GetOrdersResponseResponse</returns>
        public static GetOrdersResponse Search(AdexchangebuyerService service, ProposalsSearchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Proposals.Search();

                // Applying optional parameters to the request.                
                request = (ProposalsResource.SearchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Search failed.", ex);
            }
        }

        /// <summary>
        /// Update the given proposal to indicate that setup has been completed. 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/setupcomplete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="proposalId">The proposal id for which the setup is complete</param>
        public static void Setupcomplete(AdexchangebuyerService service, string proposalId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (proposalId == null)
                    throw new ArgumentNullException(proposalId);

                // Make the request.
                 service.Proposals.Setupcomplete(proposalId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Setupcomplete failed.", ex);
            }
        }

        /// <summary>
        /// Update the given proposal 
        /// Documentation https://developers.google.com/adexchangebuyer/v1.4/reference/proposals/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Adexchangebuyer service.</param>  
        /// <param name="proposalId">The proposal id to update.</param>
        /// <param name="revisionNumber">The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.</param>
        /// <param name="updateAction">The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.</param>
        /// <param name="body">A valid Adexchangebuyer v1.4 body.</param>
        /// <returns>ProposalResponse</returns>
        public static Proposal Update(AdexchangebuyerService service, string proposalId, string revisionNumber, string updateAction, Proposal body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (proposalId == null)
                    throw new ArgumentNullException(proposalId);
                if (revisionNumber == null)
                    throw new ArgumentNullException(revisionNumber);
                if (updateAction == null)
                    throw new ArgumentNullException(updateAction);

                // Make the request.
                return service.Proposals.Update(body, proposalId, revisionNumber, updateAction).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Proposals.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}