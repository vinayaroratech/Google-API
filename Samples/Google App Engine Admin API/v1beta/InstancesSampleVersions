// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Appengine v1beta API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The App Engine Admin API enables developers to provision and manage their App Engine applications.
// API Documentation Link https://cloud.google.com/appengine/docs/admin-api/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Appengine/v1beta/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Appengine.v1beta/ 
// Install Command: PM>  Install-Package Google.Apis.Appengine.v1beta
//
//------------------------------------------------------------------------------  
using Google.Apis.Appengine.v1beta;
using Google.Apis.Appengine.v1beta.Data;
using System;

namespace GoogleSamplecSharpSample.Appenginev1beta.Methods
{
  
    public static class InstancesSample
    {


        /// <summary>
        /// Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment. 
        /// Documentation https://developers.google.com/appengine/v1beta/reference/instances/debug
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
        /// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="body">A valid Appengine v1beta body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Debug(AppengineService service, string appsId, string servicesId, string versionsId, string instancesId, DebugInstanceRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (servicesId == null)
                    throw new ArgumentNullException(servicesId);
                if (versionsId == null)
                    throw new ArgumentNullException(versionsId);
                if (instancesId == null)
                    throw new ArgumentNullException(instancesId);

                // Make the request.
                return service.Instances.Debug(body, appsId, servicesId, versionsId, instancesId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Instances.Debug failed.", ex);
            }
        }

        /// <summary>
        /// Stops a running instance. 
        /// Documentation https://developers.google.com/appengine/v1beta/reference/instances/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
        /// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(AppengineService service, string appsId, string servicesId, string versionsId, string instancesId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (servicesId == null)
                    throw new ArgumentNullException(servicesId);
                if (versionsId == null)
                    throw new ArgumentNullException(versionsId);
                if (instancesId == null)
                    throw new ArgumentNullException(instancesId);

                // Make the request.
                return service.Instances.Delete(appsId, servicesId, versionsId, instancesId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Instances.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Gets instance information. 
        /// Documentation https://developers.google.com/appengine/v1beta/reference/instances/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
        /// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
        /// <returns>InstanceResponse</returns>
        public static Instance Get(AppengineService service, string appsId, string servicesId, string versionsId, string instancesId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (servicesId == null)
                    throw new ArgumentNullException(servicesId);
                if (versionsId == null)
                    throw new ArgumentNullException(versionsId);
                if (instancesId == null)
                    throw new ArgumentNullException(instancesId);

                // Make the request.
                return service.Instances.Get(appsId, servicesId, versionsId, instancesId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Instances.Get failed.", ex);
            }
        }
        public class InstancesListOptionalParms
        {
            /// Continuation token for fetching the next page of results.
            public string PageToken { get; set; }  
            /// Maximum results to return per page.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). 
        /// Documentation https://developers.google.com/appengine/v1beta/reference/instances/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `parent`. Name of the parent Version resource. Example: apps/myapp/services/default/versions/v1.</param>
        /// <param name="servicesId">Part of `parent`. See documentation of `appsId`.</param>
        /// <param name="versionsId">Part of `parent`. See documentation of `appsId`.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListInstancesResponseResponse</returns>
        public static ListInstancesResponse List(AppengineService service, string appsId, string servicesId, string versionsId, InstancesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (servicesId == null)
                    throw new ArgumentNullException(servicesId);
                if (versionsId == null)
                    throw new ArgumentNullException(versionsId);

                // Building the initial request.
                var request = service.Instances.List(appsId, servicesId, versionsId);

                // Applying optional parameters to the request.                
                request = (InstancesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Instances.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}