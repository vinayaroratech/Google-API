// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Appengine v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The App Engine Admin API enables developers to provision and manage their App Engine applications.
// API Documentation Link https://cloud.google.com/appengine/docs/admin-api/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Appengine/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Appengine.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Appengine.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Appengine.v1;
using Google.Apis.Appengine.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Appenginev1.Methods
{
  
    public static class IngressRulesSample
    {


        /// <summary>
        /// Gets the specified firewall rule. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the Firewall resource to retrieve. Example: apps/myapp/firewall/ingressRules/100.</param>
        /// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
        /// <returns>FirewallRuleResponse</returns>
        public static FirewallRule Get(AppengineService service, string appsId, string ingressRulesId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (ingressRulesId == null)
                    throw new ArgumentNullException(ingressRulesId);

                // Make the request.
                return service.IngressRules.Get(appsId, ingressRulesId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.Get failed.", ex);
            }
        }
        public class IngressRulesPatchOptionalParms
        {
            /// Standard field mask for the set of fields to be updated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates the specified firewall rule. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the Firewall resource to update. Example: apps/myapp/firewall/ingressRules/100.</param>
        /// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
        /// <param name="body">A valid Appengine v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>FirewallRuleResponse</returns>
        public static FirewallRule Patch(AppengineService service, string appsId, string ingressRulesId, FirewallRule body, IngressRulesPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (ingressRulesId == null)
                    throw new ArgumentNullException(ingressRulesId);

                // Building the initial request.
                var request = service.IngressRules.Patch(body, appsId, ingressRulesId);

                // Applying optional parameters to the request.                
                request = (IngressRulesResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Replaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the '*' wildcard IP range, then an "allow all" rule is explicitly added to the end of the list. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/batchUpdate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the Firewall collection to set. Example: apps/myapp/firewall/ingressRules.</param>
        /// <param name="body">A valid Appengine v1 body.</param>
        /// <returns>BatchUpdateIngressRulesResponseResponse</returns>
        public static BatchUpdateIngressRulesResponse BatchUpdate(AppengineService service, string appsId, BatchUpdateIngressRulesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);

                // Make the request.
                return service.IngressRules.BatchUpdate(body, appsId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.BatchUpdate failed.", ex);
            }
        }

        /// <summary>
        /// Deletes the specified firewall rule. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `name`. Name of the Firewall resource to delete. Example: apps/myapp/firewall/ingressRules/100.</param>
        /// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(AppengineService service, string appsId, string ingressRulesId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);
                if (ingressRulesId == null)
                    throw new ArgumentNullException(ingressRulesId);

                // Make the request.
                return service.IngressRules.Delete(appsId, ingressRulesId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.Delete failed.", ex);
            }
        }
        public class IngressRulesListOptionalParms
        {
            /// Continuation token for fetching the next page of results.
            public string PageToken { get; set; }  
            /// Maximum results to return per page.
            public int? PageSize { get; set; }  
            /// A valid IP Address. If set, only rules matching this address will be returned. The first returned rule will be the rule that fires on requests from this IP.
            public string MatchingAddress { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the firewall rules of an application. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `parent`. Name of the Firewall collection to retrieve. Example: apps/myapp/firewall/ingressRules.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListIngressRulesResponseResponse</returns>
        public static ListIngressRulesResponse List(AppengineService service, string appsId, IngressRulesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);

                // Building the initial request.
                var request = service.IngressRules.List(appsId);

                // Applying optional parameters to the request.                
                request = (IngressRulesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a firewall rule for the application. 
        /// Documentation https://developers.google.com/appengine/v1/reference/ingressRules/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Appengine service.</param>  
        /// <param name="appsId">Part of `parent`. Name of the parent Firewall collection in which to create a new rule. Example: apps/myapp/firewall/ingressRules.</param>
        /// <param name="body">A valid Appengine v1 body.</param>
        /// <returns>FirewallRuleResponse</returns>
        public static FirewallRule Create(AppengineService service, string appsId, FirewallRule body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (appsId == null)
                    throw new ArgumentNullException(appsId);

                // Make the request.
                return service.IngressRules.Create(body, appsId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request IngressRules.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}