// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Genomics v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Upload, process, query, and search Genomics data in the cloud.
// API Documentation Link https://cloud.google.com/genomics
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Genomics/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Genomics.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Genomics.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Genomics.v1;
using Google.Apis.Genomics.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Genomicsv1.Methods
{
  
    public static class DatasetsSample
    {


        /// <summary>
        /// Deletes a dataset and all of its contents (all read group sets,reference sets, variant sets, call sets, annotation sets, etc.)This is reversible (up to one week after the deletion) viathedatasets.undeleteoperation.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="datasetId">The ID of the dataset to be deleted.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(GenomicsService service, string datasetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Delete(datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Delete failed.", ex);
            }
        }
        public class DatasetsListOptionalParms
        {
            /// The continuation token, which is used to page through large result sets.To get the next page of results, set this parameter to the value of`nextPageToken` from the previous response.
            public string PageToken { get; set; }  
            /// The maximum number of results to return in a single page. If unspecified,defaults to 50. The maximum value is 1024.
            public int? PageSize { get; set; }  
            /// Required. The Google Cloud project ID to list datasets for.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Lists datasets within a project.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListDatasetsResponseResponse</returns>
        public static ListDatasetsResponse List(GenomicsService service, DatasetsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Datasets.List();

                // Applying optional parameters to the request.                
                request = (DatasetsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.List failed.", ex);
            }
        }

        /// <summary>
        /// Sets the access control policy on the specified dataset. Replaces anyexisting policy.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)See <a href="/iam/docs/managing-policies#setting_a_policy">Setting aPolicy</a> for more information. 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/setIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="resource">REQUIRED: The resource for which policy is being specified. Format is`datasets/<dataset ID>`.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy SetIamPolicy(GenomicsService service, string resource, SetIamPolicyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Datasets.SetIamPolicy(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.SetIamPolicy failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new dataset.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Create(GenomicsService service, Dataset body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Datasets.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Create failed.", ex);
            }
        }

        /// <summary>
        /// Gets the access control policy for the dataset. This is empty if thepolicy or resource does not exist.See <a href="/iam/docs/managing-policies#getting_a_policy">Getting aPolicy</a> for more information.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/getIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="resource">REQUIRED: The resource for which policy is being specified. Format is`datasets/<dataset ID>`.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy GetIamPolicy(GenomicsService service, string resource, GetIamPolicyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Datasets.GetIamPolicy(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.GetIamPolicy failed.", ex);
            }
        }

        /// <summary>
        /// Undeletes a dataset by restoring a dataset which was deleted via this API.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)This operation is only possible for a week after the deletion occurred. 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/undelete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="datasetId">The ID of the dataset to be undeleted.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Undelete(GenomicsService service, string datasetId, UndeleteDatasetRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Undelete(body, datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Undelete failed.", ex);
            }
        }
        public class DatasetsPatchOptionalParms
        {
            /// An optional mask specifying which fields to update. At this time, the onlymutable field is name. The onlyacceptable value is "name". If unspecified, all mutable fields will beupdated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a dataset.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)This method supports patch semantics. 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="datasetId">The ID of the dataset to be updated.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Patch(GenomicsService service, string datasetId, Dataset body, DatasetsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Building the initial request.
                var request = service.Datasets.Patch(body, datasetId);

                // Applying optional parameters to the request.                
                request = (DatasetsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Gets a dataset by ID.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="datasetId">The ID of the dataset.</param>
        /// <returns>DatasetResponse</returns>
        public static Dataset Get(GenomicsService service, string datasetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (datasetId == null)
                    throw new ArgumentNullException(datasetId);

                // Make the request.
                return service.Datasets.Get(datasetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.Get failed.", ex);
            }
        }

        /// <summary>
        /// Returns permissions that a caller has on the specified resource.See <a href="/iam/docs/managing-policies#testing_permissions">TestingPermissions</a> for more information.For the definitions of datasets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/datasets/testIamPermissions
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="resource">REQUIRED: The resource for which policy is being specified. Format is`datasets/<dataset ID>`.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>TestIamPermissionsResponseResponse</returns>
        public static TestIamPermissionsResponse TestIamPermissions(GenomicsService service, string resource, TestIamPermissionsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Datasets.TestIamPermissions(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Datasets.TestIamPermissions failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}