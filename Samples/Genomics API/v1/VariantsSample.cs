// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Genomics v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Upload, process, query, and search Genomics data in the cloud.
// API Documentation Link https://cloud.google.com/genomics
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Genomics/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Genomics.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Genomics.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Genomics.v1;
using Google.Apis.Genomics.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Genomicsv1.Methods
{
  
    public static class VariantsSample
    {


        /// <summary>
        /// Creates a new variant.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>VariantResponse</returns>
        public static Variant Create(GenomicsService service, Variant body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Variants.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Create failed.", ex);
            }
        }

        /// <summary>
        /// Gets a list of variants matching the criteria.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)Implements[GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126). 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/search
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>SearchVariantsResponseResponse</returns>
        public static SearchVariantsResponse Search(GenomicsService service, SearchVariantsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Variants.Search(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Search failed.", ex);
            }
        }
        public class VariantsPatchOptionalParms
        {
            /// An optional mask specifying which fields to update. At this time, mutablefields are names andinfo. Acceptable values are "names" and"info". If unspecified, all mutable fields will be updated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a variant.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)This method supports patch semantics. Returns the modified variant withoutits calls. 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="variantId">The ID of the variant to be updated.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>VariantResponse</returns>
        public static Variant Patch(GenomicsService service, string variantId, Variant body, VariantsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (variantId == null)
                    throw new ArgumentNullException(variantId);

                // Building the initial request.
                var request = service.Variants.Patch(body, variantId);

                // Applying optional parameters to the request.                
                request = (VariantsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Gets a variant by ID.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="variantId">The ID of the variant.</param>
        /// <returns>VariantResponse</returns>
        public static Variant Get(GenomicsService service, string variantId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (variantId == null)
                    throw new ArgumentNullException(variantId);

                // Make the request.
                return service.Variants.Get(variantId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Get failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a variant.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="variantId">The ID of the variant to be deleted.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(GenomicsService service, string variantId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (variantId == null)
                    throw new ArgumentNullException(variantId);

                // Make the request.
                return service.Variants.Delete(variantId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Creates variant data by asynchronously importing the provided information.For the definitions of variant sets and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)The variants for import will be merged with any existing variant thatmatches its reference sequence, start, end, reference bases, andalternative bases. If no such variant exists, a new one will be created.When variants are merged, the call information from the new variantis added to the existing variant, and Variant info fields are mergedas specified ininfoMergeConfig.As a special case, for single-sample VCF files, QUAL and FILTER fields willbe moved to the call level; these are sometimes interpreted in acall-specific context.Imported VCF headers are appended to the metadata already in a variant set. 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/import
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Import(GenomicsService service, ImportVariantsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Variants.Import(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Import failed.", ex);
            }
        }

        /// <summary>
        /// Merges the given variants with existing variants.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)Each variant will bemerged with an existing variant that matches its reference sequence,start, end, reference bases, and alternative bases. If no such variantexists, a new one will be created.When variants are merged, the call information from the new variantis added to the existing variant. Variant info fields are merged asspecified in theinfoMergeConfigfield of the MergeVariantsRequest.Please exercise caution when using this method!  It is easy to introducemistakes in existing variants and difficult to back out of them.  Forexample,suppose you were trying to merge a new variant with an existing one andbothvariants contain calls that belong to callsets with the same callset ID.    // Existing variant - irrelevant fields trimmed for clarity    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    0,                    1                ],            }        ]    }    // New variant with conflicting call information    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    1,                    1                ],            }        ]    }The resulting merged variant would overwrite the existing calls with thosefrom the new variant:    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    1,                    1                ],            }        ]    }This may be the desired outcome, but it is up to the user to determine ifif that is indeed the case. 
        /// Documentation https://developers.google.com/genomics/v1/reference/variants/merge
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Merge(GenomicsService service, MergeVariantsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Variants.Merge(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Variants.Merge failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}