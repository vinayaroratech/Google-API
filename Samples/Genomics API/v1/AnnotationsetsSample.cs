// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Genomics v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Upload, process, query, and search Genomics data in the cloud.
// API Documentation Link https://cloud.google.com/genomics
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Genomics/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Genomics.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Genomics.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Genomics.v1;
using Google.Apis.Genomics.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Genomicsv1.Methods
{
  
    public static class AnnotationsetsSample
    {


        /// <summary>
        /// Gets an annotation set. Caller must have READ permission forthe associated dataset. 
        /// Documentation https://developers.google.com/genomics/v1/reference/annotationsets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="annotationSetId">The ID of the annotation set to be retrieved.</param>
        /// <returns>AnnotationSetResponse</returns>
        public static AnnotationSet Get(GenomicsService service, string annotationSetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (annotationSetId == null)
                    throw new ArgumentNullException(annotationSetId);

                // Make the request.
                return service.Annotationsets.Get(annotationSetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Annotationsets.Get failed.", ex);
            }
        }
        public class AnnotationsetsUpdateOptionalParms
        {
            /// An optional mask specifying which fields to update. Mutable fields arename,source_uri, andinfo. If unspecified, allmutable fields will be updated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates an annotation set. The update must respect all mutabilityrestrictions and other invariants described on the annotation set resource.Caller must have WRITE permission for the associated dataset. 
        /// Documentation https://developers.google.com/genomics/v1/reference/annotationsets/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="annotationSetId">The ID of the annotation set to be updated.</param>
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AnnotationSetResponse</returns>
        public static AnnotationSet Update(GenomicsService service, string annotationSetId, AnnotationSet body, AnnotationsetsUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (annotationSetId == null)
                    throw new ArgumentNullException(annotationSetId);

                // Building the initial request.
                var request = service.Annotationsets.Update(body, annotationSetId);

                // Applying optional parameters to the request.                
                request = (AnnotationsetsResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Annotationsets.Update failed.", ex);
            }
        }

        /// <summary>
        /// Creates a new annotation set. Caller must have WRITE permission for theassociated dataset.The following fields are required:  * datasetId  * referenceSetIdAll other fields may be optionally specified, unless documented as beingserver-generated (for example, the `id` field). 
        /// Documentation https://developers.google.com/genomics/v1/reference/annotationsets/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>AnnotationSetResponse</returns>
        public static AnnotationSet Create(GenomicsService service, AnnotationSet body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Annotationsets.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Annotationsets.Create failed.", ex);
            }
        }

        /// <summary>
        /// Deletes an annotation set. Caller must have WRITE permissionfor the associated annotation set. 
        /// Documentation https://developers.google.com/genomics/v1/reference/annotationsets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="annotationSetId">The ID of the annotation set to be deleted.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(GenomicsService service, string annotationSetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (annotationSetId == null)
                    throw new ArgumentNullException(annotationSetId);

                // Make the request.
                return service.Annotationsets.Delete(annotationSetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Annotationsets.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Searches for annotation sets that match the given criteria. Annotation setsare returned in an unspecified order. This order is consistent, such thattwo queries for the same content (regardless of page size) yield annotationsets in the same order across their respective streams of paginatedresponses. Caller must have READ permission for the queried datasets. 
        /// Documentation https://developers.google.com/genomics/v1/reference/annotationsets/search
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1 body.</param>
        /// <returns>SearchAnnotationSetsResponseResponse</returns>
        public static SearchAnnotationSetsResponse Search(GenomicsService service, SearchAnnotationSetsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Annotationsets.Search(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Annotationsets.Search failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}