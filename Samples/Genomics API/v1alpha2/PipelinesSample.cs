// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Genomics v1alpha2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Upload, process, query, and search Genomics data in the cloud.
// API Documentation Link https://cloud.google.com/genomics
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Genomics/v1alpha2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Genomics.v1alpha2/ 
// Install Command: PM>  Install-Package Google.Apis.Genomics.v1alpha2
//
//------------------------------------------------------------------------------  
using Google.Apis.Genomics.v1alpha2;
using Google.Apis.Genomics.v1alpha2.Data;
using System;

namespace GoogleSamplecSharpSample.Genomicsv1alpha2.Methods
{
  
    public static class PipelinesSample
    {


        /// <summary>
        /// Creates a pipeline that can be run later. Create takes a Pipeline thathas all fields other than `pipelineId` populated, and then returnsthe same pipeline with `pipelineId` populated. This id can be usedto run the pipeline.Caller must have WRITE permission to the project. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1alpha2 body.</param>
        /// <returns>PipelineResponse</returns>
        public static Pipeline Create(GenomicsService service, Pipeline body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Pipelines.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.Create failed.", ex);
            }
        }

        /// <summary>
        /// Runs a pipeline. If `pipelineId` is specified in the request, thenrun a saved pipeline. If `ephemeralPipeline` is specified, then runthat pipeline once without saving a copy.The caller must have READ permission to the project where the pipelineis stored and WRITE permission to the project where the pipeline will berun, as VMs will be created and storage will be used.If a pipeline operation is still running after 6 days, it will be canceled. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/run
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1alpha2 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Run(GenomicsService service, RunPipelineRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Pipelines.Run(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.Run failed.", ex);
            }
        }

        /// <summary>
        /// Retrieves a pipeline based on ID.Caller must have READ permission to the project. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="pipelineId">Caller must have READ access to the project in which this pipelineis defined.</param>
        /// <returns>PipelineResponse</returns>
        public static Pipeline Get(GenomicsService service, string pipelineId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (pipelineId == null)
                    throw new ArgumentNullException(pipelineId);

                // Make the request.
                return service.Pipelines.Get(pipelineId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.Get failed.", ex);
            }
        }

        /// <summary>
        /// Sets status of a given operation. Any new timestamps (as determined bydescription) are appended to TimestampEvents. Should only be called by VMscreated by the Pipelines Service and not by end users. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/setOperationStatus
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="body">A valid Genomics v1alpha2 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty SetOperationStatus(GenomicsService service, SetOperationStatusRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Pipelines.SetOperationStatus(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.SetOperationStatus failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a pipeline based on ID.Caller must have WRITE permission to the project. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="pipelineId">Caller must have WRITE access to the project in which this pipelineis defined.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(GenomicsService service, string pipelineId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (pipelineId == null)
                    throw new ArgumentNullException(pipelineId);

                // Make the request.
                return service.Pipelines.Delete(pipelineId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.Delete failed.", ex);
            }
        }
        public class PipelinesGetControllerConfigOptionalParms
        {
            /// NA
            public string ValidationToken { get; set; }  
            /// The operation to retrieve controller configuration for.
            public string OperationId { get; set; }  
        
        }
 
        /// <summary>
        /// Gets controller configuration information. Should only be calledby VMs created by the Pipelines Service and not by end users. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/getControllerConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ControllerConfigResponse</returns>
        public static ControllerConfig GetControllerConfig(GenomicsService service, PipelinesGetControllerConfigOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Pipelines.GetControllerConfig();

                // Applying optional parameters to the request.                
                request = (PipelinesResource.GetControllerConfigRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.GetControllerConfig failed.", ex);
            }
        }
        public class PipelinesListOptionalParms
        {
            /// Pipelines with names that match this prefix should bereturned.  If unspecified, all pipelines in the project, up to`pageSize`, will be returned.
            public string NamePrefix { get; set; }  
            /// Token to use to indicate where to start getting results.If unspecified, returns the first page of results.
            public string PageToken { get; set; }  
            /// Number of pipelines to return at once. Defaults to 256, and maxis 2048.
            public int? PageSize { get; set; }  
            /// Required. The name of the project to search for pipelines. Callermust have READ access to this project.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Lists pipelines.Caller must have READ permission to the project. 
        /// Documentation https://developers.google.com/genomics/v1alpha2/reference/pipelines/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Genomics service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListPipelinesResponseResponse</returns>
        public static ListPipelinesResponse List(GenomicsService service, PipelinesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Pipelines.List();

                // Applying optional parameters to the request.                
                request = (PipelinesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Pipelines.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}