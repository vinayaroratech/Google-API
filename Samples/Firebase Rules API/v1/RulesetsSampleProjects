// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Firebaserules v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.
// API Documentation Link https://firebase.google.com/docs/storage/security
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Firebaserules/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Firebaserules.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Firebaserules.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Firebaserules.v1;
using Google.Apis.Firebaserules.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Firebaserulesv1.Methods
{
  
    public static class RulesetsSample
    {


        /// <summary>
        /// Delete a `Ruleset` by resource name.If the `Ruleset` is referenced by a `Release` the operation will fail. 
        /// Documentation https://developers.google.com/firebaserules/v1/reference/rulesets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaserules service.</param>  
        /// <param name="name">Resource name for the ruleset to delete.Format: `projects/{project_id}/rulesets/{ruleset_id}`</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(FirebaserulesService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Rulesets.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rulesets.Delete failed.", ex);
            }
        }
        public class RulesetsListOptionalParms
        {
            /// `Ruleset` filter. The list method supports filters with restrictions on`Ruleset.name`.Filters on `Ruleset.create_time` should use the `date` function whichparses strings that conform to the RFC 3339 date/time specifications.Example: `create_time > date("2017-01-01") AND name=UUID-*`
            public string Filter { get; set; }  
            /// Next page token for loading the next batch of `Ruleset` instances.
            public string PageToken { get; set; }  
            /// Page size to load. Maximum of 100. Defaults to 10.Note: `page_size` is just a hint and the service may choose to load lessthan `page_size` due to the size of the output. To traverse all of thereleases, caller should iterate until the `page_token` is empty.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// List `Ruleset` metadata only and optionally filter the results by `Ruleset`name.The full `Source` contents of a `Ruleset` may be retrieved withGetRuleset. 
        /// Documentation https://developers.google.com/firebaserules/v1/reference/rulesets/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaserules service.</param>  
        /// <param name="name">Resource name for the project.Format: `projects/{project_id}`</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListRulesetsResponseResponse</returns>
        public static ListRulesetsResponse List(FirebaserulesService service, string name, RulesetsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Building the initial request.
                var request = service.Rulesets.List(name);

                // Applying optional parameters to the request.                
                request = (RulesetsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rulesets.List failed.", ex);
            }
        }

        /// <summary>
        /// Get a `Ruleset` by name including the full `Source` contents. 
        /// Documentation https://developers.google.com/firebaserules/v1/reference/rulesets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaserules service.</param>  
        /// <param name="name">Resource name for the ruleset to get.Format: `projects/{project_id}/rulesets/{ruleset_id}`</param>
        /// <returns>RulesetResponse</returns>
        public static Ruleset Get(FirebaserulesService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Rulesets.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rulesets.Get failed.", ex);
            }
        }

        /// <summary>
        /// Create a `Ruleset` from `Source`.The `Ruleset` is given a unique generated name which is returned to thecaller. `Source` containing syntactic or semantics errors will result in anerror response indicating the first error encountered. For a detailed viewof `Source` issues, use TestRuleset. 
        /// Documentation https://developers.google.com/firebaserules/v1/reference/rulesets/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Firebaserules service.</param>  
        /// <param name="name">Resource name for Project which owns this `Ruleset`.Format: `projects/{project_id}`</param>
        /// <param name="body">A valid Firebaserules v1 body.</param>
        /// <returns>RulesetResponse</returns>
        public static Ruleset Create(FirebaserulesService service, string name, Ruleset body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Rulesets.Create(body, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Rulesets.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}