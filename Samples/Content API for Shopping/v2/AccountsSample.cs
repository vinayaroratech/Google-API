// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Shoppingcontent v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages product items, inventory, and Merchant Center accounts for Google Shopping.
// API Documentation Link https://developers.google.com/shopping-content
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Shoppingcontent/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Shoppingcontent.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Shoppingcontent.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Shoppingcontent.v2;
using Google.Apis.Shoppingcontent.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Shoppingcontentv2.Methods
{
  
    public static class AccountsSample
    {


        /// <summary>
        /// Returns information about the authenticated user. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/authinfo
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <returns>AccountsAuthInfoResponseResponse</returns>
        public static AccountsAuthInfoResponse Authinfo(ShoppingcontentService service)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Make the request.
                return service.Accounts.Authinfo().Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Authinfo failed.", ex);
            }
        }
        public class AccountsClaimwebsiteOptionalParms
        {
            /// Only available to selected merchants. When set to True, this flag removes any existing claim on the requested website by another account and replaces it with a claim from this account.
            public bool? Overwrite { get; set; }  
        
        }
 
        /// <summary>
        /// Claims the website of a Merchant Center sub-account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/claimwebsite
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="accountId">The ID of the account whose website is claimed.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountsClaimWebsiteResponseResponse</returns>
        public static AccountsClaimWebsiteResponse Claimwebsite(ShoppingcontentService service, string merchantId, string accountId, AccountsClaimwebsiteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Building the initial request.
                var request = service.Accounts.Claimwebsite(merchantId, accountId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.ClaimwebsiteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Claimwebsite failed.", ex);
            }
        }
        public class AccountsCustombatchOptionalParms
        {
            /// Flag to run the request in dry-run mode.
            public bool? DryRun { get; set; }  
        
        }
 
        /// <summary>
        /// Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/custombatch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="body">A valid Shoppingcontent v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountsCustomBatchResponseResponse</returns>
        public static AccountsCustomBatchResponse Custombatch(ShoppingcontentService service, AccountsCustomBatchRequest body, AccountsCustombatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Building the initial request.
                var request = service.Accounts.Custombatch(body);

                // Applying optional parameters to the request.                
                request = (AccountsResource.CustombatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Custombatch failed.", ex);
            }
        }
        public class AccountsDeleteOptionalParms
        {
            /// Flag to run the request in dry-run mode.
            public bool? DryRun { get; set; }  
            /// Flag to delete sub-accounts with products. The default value is false.
            public bool? Force { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes a Merchant Center sub-account. This method can only be called for multi-client accounts. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="accountId">The ID of the account.</param>
        /// <param name="optional">Optional paramaters.</param>
        public static void Delete(ShoppingcontentService service, string merchantId, string accountId, AccountsDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Building the initial request.
                var request = service.Accounts.Delete(merchantId, accountId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                 request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Retrieves a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="accountId">The ID of the account.</param>
        /// <returns>AccountResponse</returns>
        public static Account Get(ShoppingcontentService service, string merchantId, string accountId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Make the request.
                return service.Accounts.Get(merchantId, accountId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Get failed.", ex);
            }
        }
        public class AccountsInsertOptionalParms
        {
            /// Flag to run the request in dry-run mode.
            public bool? DryRun { get; set; }  
        
        }
 
        /// <summary>
        /// Creates a Merchant Center sub-account. This method can only be called for multi-client accounts. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="body">A valid Shoppingcontent v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountResponse</returns>
        public static Account Insert(ShoppingcontentService service, string merchantId, Account body, AccountsInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);

                // Building the initial request.
                var request = service.Accounts.Insert(body, merchantId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Insert failed.", ex);
            }
        }
        public class AccountsListOptionalParms
        {
            /// The maximum number of accounts to return in the response, used for paging.
            public int? MaxResults { get; set; }  
            /// The token returned by the previous request.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the sub-accounts in your Merchant Center account. This method can only be called for multi-client accounts. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountsListResponseResponse</returns>
        public static AccountsListResponse List(ShoppingcontentService service, string merchantId, AccountsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);

                // Building the initial request.
                var request = service.Accounts.List(merchantId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.List failed.", ex);
            }
        }
        public class AccountsPatchOptionalParms
        {
            /// Flag to run the request in dry-run mode.
            public bool? DryRun { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account. This method supports patch semantics. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="accountId">The ID of the account.</param>
        /// <param name="body">A valid Shoppingcontent v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountResponse</returns>
        public static Account Patch(ShoppingcontentService service, string merchantId, string accountId, Account body, AccountsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Building the initial request.
                var request = service.Accounts.Patch(body, merchantId, accountId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Patch failed.", ex);
            }
        }
        public class AccountsUpdateOptionalParms
        {
            /// Flag to run the request in dry-run mode.
            public bool? DryRun { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a Merchant Center account. This method can only be called for accounts to which the managing account has access: either the managing account itself for any Merchant Center account, or any sub-account when the managing account is a multi-client account. 
        /// Documentation https://developers.google.com/shoppingcontent/v2/reference/accounts/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Shoppingcontent service.</param>  
        /// <param name="merchantId">The ID of the managing account.</param>
        /// <param name="accountId">The ID of the account.</param>
        /// <param name="body">A valid Shoppingcontent v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>AccountResponse</returns>
        public static Account Update(ShoppingcontentService service, string merchantId, string accountId, Account body, AccountsUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (merchantId == null)
                    throw new ArgumentNullException(merchantId);
                if (accountId == null)
                    throw new ArgumentNullException(accountId);

                // Building the initial request.
                var request = service.Accounts.Update(body, merchantId, accountId);

                // Applying optional parameters to the request.                
                request = (AccountsResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Accounts.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}