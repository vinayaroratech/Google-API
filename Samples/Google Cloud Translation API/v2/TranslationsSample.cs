// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Translate v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Google Cloud Translation API lets websites and programs integrate with    Google Translate programmatically.
// API Documentation Link https://code.google.com/apis/language/translate/v2/getting_started.html
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Translate/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Translate.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Translate.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Translate.v2;
using Google.Apis.Translate.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Translatev2.Methods
{
  
    public static class TranslationsSample
    {

        public class TranslationsListOptionalParms
        {
            /// The language of the source text, set to one of the language codes listed inLanguage Support. If the source language is not specified, the API willattempt to identify the source language automatically and return it withinthe response.
            public string Source { get; set; }  
            /// The customization id for translate
            public string Cid { get; set; }  
            /// The format of the source text, in either HTML (default) or plain-text. Avalue of "html" indicates HTML and a value of "text" indicates plain-text.
            public string Format { get; set; }  
            /// The `model` type requested for this translation. Valid values arelisted in public documentation.
            public string Model { get; set; }  
        
        }
 
        /// <summary>
        /// Translates input text, returning translated text. 
        /// Documentation https://developers.google.com/translate/v2/reference/translations/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Translate service.</param>  
        /// <param name="q">The input text to translate. Repeat this parameter to perform translationoperations on multiple text inputs.</param>
        /// <param name="target">The language to use for translation of the input text, set to one of thelanguage codes listed in Language Support.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>TranslationsListResponseResponse</returns>
        public static TranslationsListResponse List(TranslateService service, string q, string target, TranslationsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (q == null)
                    throw new ArgumentNullException(q);
                if (target == null)
                    throw new ArgumentNullException(target);

                // Building the initial request.
                var request = service.Translations.List(q, target);

                // Applying optional parameters to the request.                
                request = (TranslationsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Translations.List failed.", ex);
            }
        }

        /// <summary>
        /// Translates input text, returning translated text. 
        /// Documentation https://developers.google.com/translate/v2/reference/translations/translate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Translate service.</param>  
        /// <param name="body">A valid Translate v2 body.</param>
        /// <returns>TranslationsListResponseResponse</returns>
        public static TranslationsListResponse Translate(TranslateService service, TranslateTextRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Translations.Translate(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Translations.Translate failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}