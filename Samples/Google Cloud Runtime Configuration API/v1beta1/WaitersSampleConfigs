// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Cloudruntimeconfig v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
// API Documentation Link https://cloud.google.com/deployment-manager/runtime-configurator/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Cloudruntimeconfig/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Cloudruntimeconfig.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Cloudruntimeconfig.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Cloudruntimeconfig.v1beta1;
using Google.Apis.Cloudruntimeconfig.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Cloudruntimeconfigv1beta1.Methods
{
  
    public static class WaitersSample
    {


        /// <summary>
        /// Gets information about a single waiter. 
        /// Documentation https://developers.google.com/cloudruntimeconfig/v1beta1/reference/waiters/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudruntimeconfig service.</param>  
        /// <param name="name">The fully-qualified name of the Waiter resource object to retrieve, in theformat:`projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]`</param>
        /// <returns>WaiterResponse</returns>
        public static Waiter Get(CloudruntimeconfigService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Waiters.Get(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Waiters.Get failed.", ex);
            }
        }
        public class WaitersListOptionalParms
        {
            /// Specifies a page token to use. Set `pageToken` to a `nextPageToken`returned by a previous list request to get the next page of results.
            public string PageToken { get; set; }  
            /// Specifies the number of results to return per page. If there are fewerelements than the specified number, returns all elements.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// List waiters within the given configuration. 
        /// Documentation https://developers.google.com/cloudruntimeconfig/v1beta1/reference/waiters/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudruntimeconfig service.</param>  
        /// <param name="parent">The path to the configuration for which you want to get a list of waiters.The configuration must exist beforehand; the path must be in the format:`projects/[PROJECT_ID]/configs/[CONFIG_NAME]`</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListWaitersResponseResponse</returns>
        public static ListWaitersResponse List(CloudruntimeconfigService service, string parent, WaitersListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Waiters.List(parent);

                // Applying optional parameters to the request.                
                request = (WaitersResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Waiters.List failed.", ex);
            }
        }
        public class WaitersCreateOptionalParms
        {
            /// An optional but recommended unique `request_id`. If the serverreceives two `create()` requests  with the same`request_id`, then the second request will be ignored and thefirst resource created and stored in the backend is returned.Empty `request_id` fields are ignored.It is responsibility of the client to ensure uniqueness of the`request_id` strings.`request_id` strings are limited to 64 characters.
            public string RequestId { get; set; }  
        
        }
 
        /// <summary>
        /// Creates a Waiter resource. This operation returns a long-running Operationresource which can be polled for completion. However, a waiter with thegiven name will exist (and can be retrieved) prior to the operationcompleting. If the operation fails, the failed Waiter resource willstill exist and must be deleted prior to subsequent creation attempts. 
        /// Documentation https://developers.google.com/cloudruntimeconfig/v1beta1/reference/waiters/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudruntimeconfig service.</param>  
        /// <param name="parent">The path to the configuration that will own the waiter.The configuration must exist beforehand; the path must be in the format:`projects/[PROJECT_ID]/configs/[CONFIG_NAME]`.</param>
        /// <param name="body">A valid Cloudruntimeconfig v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(CloudruntimeconfigService service, string parent, Waiter body, WaitersCreateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Waiters.Create(body, parent);

                // Applying optional parameters to the request.                
                request = (WaitersResource.CreateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Waiters.Create failed.", ex);
            }
        }

        /// <summary>
        /// Returns permissions that a caller has on the specified resource.If the resource does not exist, this will return an empty set ofpermissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-awareUIs and command-line tools, not for authorization checking. This operationmay "fail open" without warning. 
        /// Documentation https://developers.google.com/cloudruntimeconfig/v1beta1/reference/waiters/testIamPermissions
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudruntimeconfig service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy detail is being requested.See the operation documentation for the appropriate value for this field.</param>
        /// <param name="body">A valid Cloudruntimeconfig v1beta1 body.</param>
        /// <returns>TestIamPermissionsResponseResponse</returns>
        public static TestIamPermissionsResponse TestIamPermissions(CloudruntimeconfigService service, string resource, TestIamPermissionsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Waiters.TestIamPermissions(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Waiters.TestIamPermissions failed.", ex);
            }
        }

        /// <summary>
        /// Deletes the waiter with the specified name. 
        /// Documentation https://developers.google.com/cloudruntimeconfig/v1beta1/reference/waiters/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Cloudruntimeconfig service.</param>  
        /// <param name="name">The Waiter resource to delete, in the format: `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]`</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(CloudruntimeconfigService service, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Waiters.Delete(name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Waiters.Delete failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}