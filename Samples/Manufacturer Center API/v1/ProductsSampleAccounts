// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Manufacturercenter v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Public API for managing Manufacturer Center related data.
// API Documentation Link https://developers.google.com/manufacturers/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Manufacturercenter/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Manufacturercenter.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Manufacturercenter.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Manufacturercenter.v1;
using Google.Apis.Manufacturercenter.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Manufacturercenterv1.Methods
{
  
    public static class ProductsSample
    {


        /// <summary>
        /// Deletes the product from a Manufacturer Center account. 
        /// Documentation https://developers.google.com/manufacturercenter/v1/reference/products/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Manufacturercenter service.</param>  
        /// <param name="parent">Parent ID in the format `accounts/{account_id}`.`account_id` - The ID of the Manufacturer Center account.</param>
        /// <param name="name">Name in the format `{target_country}:{content_language}:{product_id}`.`target_country`   - The target country of the product as a CLDR territory                     code (for example, US).`content_language` - The content language of the product as a two-letter                     ISO 639-1 language code (for example, en).`product_id`     -   The ID of the product. For more information, see                     https://support.google.com/manufacturers/answer/6124116#id.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(ManufacturercenterService service, string parent, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Products.Delete(parent, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Products.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Gets the product from a Manufacturer Center account, including productissues.A recently updated product takes around 15 minutes to process. Changes areonly visible after it has been processed. While some issues may beavailable once the product has been processed, other issues may take daysto appear. 
        /// Documentation https://developers.google.com/manufacturercenter/v1/reference/products/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Manufacturercenter service.</param>  
        /// <param name="parent">Parent ID in the format `accounts/{account_id}`.`account_id` - The ID of the Manufacturer Center account.</param>
        /// <param name="name">Name in the format `{target_country}:{content_language}:{product_id}`.`target_country`   - The target country of the product as a CLDR territory                     code (for example, US).`content_language` - The content language of the product as a two-letter                     ISO 639-1 language code (for example, en).`product_id`     -   The ID of the product. For more information, see                     https://support.google.com/manufacturers/answer/6124116#id.</param>
        /// <returns>ProductResponse</returns>
        public static Product Get(ManufacturercenterService service, string parent, string name)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Products.Get(parent, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Products.Get failed.", ex);
            }
        }
        public class ProductsListOptionalParms
        {
            /// The token returned by the previous request.
            public string PageToken { get; set; }  
            /// Maximum number of product statuses to return in the response, used forpaging.
            public int? PageSize { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all the products in a Manufacturer Center account. 
        /// Documentation https://developers.google.com/manufacturercenter/v1/reference/products/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Manufacturercenter service.</param>  
        /// <param name="parent">Parent ID in the format `accounts/{account_id}`.`account_id` - The ID of the Manufacturer Center account.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListProductsResponseResponse</returns>
        public static ListProductsResponse List(ManufacturercenterService service, string parent, ProductsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (parent == null)
                    throw new ArgumentNullException(parent);

                // Building the initial request.
                var request = service.Products.List(parent);

                // Applying optional parameters to the request.                
                request = (ProductsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Products.List failed.", ex);
            }
        }

        /// <summary>
        /// Inserts or updates the product in a Manufacturer Center account.The checks at upload time are minimal. All required attributes need to bepresent for a product to be valid. Issues may show up laterafter the API has accepted an update for a product and it is possible tooverwrite an existing valid product with an invalid product. To detectthis, you should retrieve the product and check it for issues once theupdated version is available.Inserted or updated products first need to be processed before they can beretrieved. Until then, new products will be unavailable, and retrievalof updated products will return the original state of the product. 
        /// Documentation https://developers.google.com/manufacturercenter/v1/reference/products/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Manufacturercenter service.</param>  
        /// <param name="parent">Parent ID in the format `accounts/{account_id}`.`account_id` - The ID of the Manufacturer Center account.</param>
        /// <param name="name">Name in the format `{target_country}:{content_language}:{product_id}`.`target_country`   - The target country of the product as a CLDR territory                     code (for example, US).`content_language` - The content language of the product as a two-letter                     ISO 639-1 language code (for example, en).`product_id`     -   The ID of the product. For more information, see                     https://support.google.com/manufacturers/answer/6124116#id.</param>
        /// <param name="body">A valid Manufacturercenter v1 body.</param>
        /// <returns>ProductResponse</returns>
        public static Product Update(ManufacturercenterService service, string parent, string name, Product body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (parent == null)
                    throw new ArgumentNullException(parent);
                if (name == null)
                    throw new ArgumentNullException(name);

                // Make the request.
                return service.Products.Update(body, parent, name).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Products.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}