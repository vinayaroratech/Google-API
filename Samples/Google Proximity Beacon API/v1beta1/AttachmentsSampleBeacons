// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Proximitybeacon v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Registers, manages, indexes, and searches beacons.
// API Documentation Link https://developers.google.com/beacons/proximity/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Proximitybeacon/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Proximitybeacon.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Proximitybeacon.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Proximitybeacon.v1beta1;
using Google.Apis.Proximitybeacon.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Proximitybeaconv1beta1.Methods
{
  
    public static class AttachmentsSample
    {

        public class AttachmentsDeleteOptionalParms
        {
            /// The project id of the attachment to delete. If not provided, the projectthat is making the request is used.Optional.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes the specified attachment for the given beacon. Each attachment hasa unique attachment name (`attachmentName`) which is returned when youfetch the attachment data via this API. You specify this with the deleterequest to control which attachment is removed. This operation cannot beundone.Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)from a signed-in user with **Is owner** or **Can edit** permissions in theGoogle Developers Console project. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/attachments/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="attachmentName">The attachment name (`attachmentName`) ofthe attachment to remove. For example:`beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. ForEddystone-EID beacons, the beacon ID portion (`3!893737abc9`) may be thebeacon's current EID, or its "stable" Eddystone-UID.Required.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(ProximitybeaconService service, string attachmentName, AttachmentsDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (attachmentName == null)
                    throw new ArgumentNullException(attachmentName);

                // Building the initial request.
                var request = service.Attachments.Delete(attachmentName);

                // Applying optional parameters to the request.                
                request = (AttachmentsResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Attachments.Delete failed.", ex);
            }
        }
        public class AttachmentsListOptionalParms
        {
            /// The project id to list beacon attachments under. This field can beused when "*" is specified to mean all attachment namespaces. Projectsmay have multiple attachments with multiple namespaces. If "*" isspecified and the projectId string is empty, then the projectmaking the request is used.Optional.
            public string ProjectId { get; set; }  
            /// Specifies the namespace and type of attachment to include in response in<var>namespace/type</var> format. Accepts `*/*` to specify"all types in all namespaces".
            public string NamespacedType { get; set; }  
        
        }
 
        /// <summary>
        /// Returns the attachments for the specified beacon that match the specifiednamespaced-type pattern.To control which namespaced types are returned, you add the`namespacedType` query parameter to the request. You must either use`*/*`, to return all attachments, or the namespace must be one ofthe ones returned from the  `namespaces` endpoint.Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)from a signed-in user with **viewer**, **Is owner** or **Can edit**permissions in the Google Developers Console project. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/attachments/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="beaconName">Beacon whose attachments should be fetched. A beacon name has theformat "beacons/N!beaconId" where the beaconId is the base16 ID broadcastby the beacon and N is a code for the beacon's type. Possible values are`3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`for AltBeacon. For Eddystone-EID beacons, you may use either thecurrent EID or the beacon's "stable" UID.Required.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListBeaconAttachmentsResponseResponse</returns>
        public static ListBeaconAttachmentsResponse List(ProximitybeaconService service, string beaconName, AttachmentsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (beaconName == null)
                    throw new ArgumentNullException(beaconName);

                // Building the initial request.
                var request = service.Attachments.List(beaconName);

                // Applying optional parameters to the request.                
                request = (AttachmentsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Attachments.List failed.", ex);
            }
        }
        public class AttachmentsBatchDeleteOptionalParms
        {
            /// The project id to delete beacon attachments under. This field can beused when "*" is specified to mean all attachment namespaces. Projectsmay have multiple attachments with multiple namespaces. If "*" isspecified and the projectId string is empty, then the projectmaking the request is used.Optional.
            public string ProjectId { get; set; }  
            /// Specifies the namespace and type of attachments to delete in`namespace/type` format. Accepts `*/*` to specify"all types in all namespaces".Optional.
            public string NamespacedType { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes multiple attachments on a given beacon. This operation ispermanent and cannot be undone.You can optionally specify `namespacedType` to choose which attachmentsshould be deleted. If you do not specify `namespacedType`,  all yourattachments on the given beacon will be deleted. You also may explicitlyspecify `*/*` to delete all.Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)from a signed-in user with **Is owner** or **Can edit** permissions in theGoogle Developers Console project. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/attachments/batchDelete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="beaconName">The beacon whose attachments should be deleted. A beacon name has theformat "beacons/N!beaconId" where the beaconId is the base16 ID broadcastby the beacon and N is a code for the beacon's type. Possible values are`3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`for AltBeacon. For Eddystone-EID beacons, you may use either thecurrent EID or the beacon's "stable" UID.Required.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>DeleteAttachmentsResponseResponse</returns>
        public static DeleteAttachmentsResponse BatchDelete(ProximitybeaconService service, string beaconName, AttachmentsBatchDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (beaconName == null)
                    throw new ArgumentNullException(beaconName);

                // Building the initial request.
                var request = service.Attachments.BatchDelete(beaconName);

                // Applying optional parameters to the request.                
                request = (AttachmentsResource.BatchDeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Attachments.BatchDelete failed.", ex);
            }
        }
        public class AttachmentsCreateOptionalParms
        {
            /// The project id of the project the attachment will belong to. Ifthe project id is not specified then the project making the requestis used.Optional.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Associates the given data with the specified beacon. Attachment data mustcontain two parts:<ul><li>A namespaced type.</li><li>The actual attachment data itself.</li></ul>The namespaced type consists of two parts, the namespace and the type.The namespace must be one of the values returned by the `namespaces`endpoint, while the type can be a string of any characters except for theforward slash (`/`) up to 100 characters in length.Attachment data can be up to 1024 bytes long.Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)from a signed-in user with **Is owner** or **Can edit** permissions in theGoogle Developers Console project. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/attachments/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="beaconName">Beacon on which the attachment should be created. A beacon name has theformat "beacons/N!beaconId" where the beaconId is the base16 ID broadcastby the beacon and N is a code for the beacon's type. Possible values are`3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`for AltBeacon. For Eddystone-EID beacons, you may use either thecurrent EID or the beacon's "stable" UID.Required.</param>
        /// <param name="body">A valid Proximitybeacon v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>BeaconAttachmentResponse</returns>
        public static BeaconAttachment Create(ProximitybeaconService service, string beaconName, BeaconAttachment body, AttachmentsCreateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (beaconName == null)
                    throw new ArgumentNullException(beaconName);

                // Building the initial request.
                var request = service.Attachments.Create(body, beaconName);

                // Applying optional parameters to the request.                
                request = (AttachmentsResource.CreateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Attachments.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}