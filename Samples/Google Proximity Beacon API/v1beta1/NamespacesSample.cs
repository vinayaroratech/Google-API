// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Proximitybeacon v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Registers, manages, indexes, and searches beacons.
// API Documentation Link https://developers.google.com/beacons/proximity/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Proximitybeacon/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Proximitybeacon.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Proximitybeacon.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Proximitybeacon.v1beta1;
using Google.Apis.Proximitybeacon.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Proximitybeaconv1beta1.Methods
{
  
    public static class NamespacesSample
    {

        public class NamespacesListOptionalParms
        {
            /// The project id to list namespaces under.Optional.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all attachment namespaces owned by your Google Developers Consoleproject. Attachment data associated with a beacon must include anamespaced type, and the namespace must be owned by your project.Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)from a signed-in user with **viewer**, **Is owner** or **Can edit**permissions in the Google Developers Console project. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/namespaces/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListNamespacesResponseResponse</returns>
        public static ListNamespacesResponse List(ProximitybeaconService service, NamespacesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Namespaces.List();

                // Applying optional parameters to the request.                
                request = (NamespacesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Namespaces.List failed.", ex);
            }
        }
        public class NamespacesUpdateOptionalParms
        {
            /// The project id of the namespace to update. If the project id is notspecified then the project making the request is used. The project idmust match the project that owns the beacon.Optional.
            public string ProjectId { get; set; }  
        
        }
 
        /// <summary>
        /// Updates the information about the specified namespace. Only the namespacevisibility can be updated. 
        /// Documentation https://developers.google.com/proximitybeacon/v1beta1/reference/namespaces/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Proximitybeacon service.</param>  
        /// <param name="namespaceName">Resource name of this namespace. Namespaces names have the format:<code>namespaces/<var>namespace</var></code>.</param>
        /// <param name="body">A valid Proximitybeacon v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>NamespaceResponse</returns>
        public static Namespace Update(ProximitybeaconService service, string namespaceName, Namespace body, NamespacesUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (namespaceName == null)
                    throw new ArgumentNullException(namespaceName);

                // Building the initial request.
                var request = service.Namespaces.Update(body, namespaceName);

                // Applying optional parameters to the request.                
                request = (NamespacesResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Namespaces.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}