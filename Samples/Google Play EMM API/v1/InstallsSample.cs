// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Androidenterprise v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages the deployment of apps to Android for Work users.
// API Documentation Link https://developers.google.com/android/work/play/emm-api
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Androidenterprise/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Androidenterprise.v1/ 
// Install Command: PM>  Install-Package Google.Apis.Androidenterprise.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.Androidenterprise.v1;
using Google.Apis.Androidenterprise.v1.Data;
using System;

namespace GoogleSamplecSharpSample.Androidenterprisev1.Methods
{
  
    public static class InstallsSample
    {


        /// <summary>
        /// Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/installs/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Androidenterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="deviceId">The Android ID of the device.</param>
        /// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
        public static void Delete(AndroidenterpriseService service, string enterpriseId, string userId, string deviceId, string installId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (deviceId == null)
                    throw new ArgumentNullException(deviceId);
                if (installId == null)
                    throw new ArgumentNullException(installId);

                // Make the request.
                 service.Installs.Delete(enterpriseId, userId, deviceId, installId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Installs.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Retrieves details of an installation of an app on a device. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/installs/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Androidenterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="deviceId">The Android ID of the device.</param>
        /// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
        /// <returns>InstallResponse</returns>
        public static Install Get(AndroidenterpriseService service, string enterpriseId, string userId, string deviceId, string installId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (deviceId == null)
                    throw new ArgumentNullException(deviceId);
                if (installId == null)
                    throw new ArgumentNullException(installId);

                // Make the request.
                return service.Installs.Get(enterpriseId, userId, deviceId, installId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Installs.Get failed.", ex);
            }
        }

        /// <summary>
        /// Retrieves the details of all apps installed on the specified device. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/installs/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Androidenterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="deviceId">The Android ID of the device.</param>
        /// <returns>InstallsListResponseResponse</returns>
        public static InstallsListResponse List(AndroidenterpriseService service, string enterpriseId, string userId, string deviceId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (deviceId == null)
                    throw new ArgumentNullException(deviceId);

                // Make the request.
                return service.Installs.List(enterpriseId, userId, deviceId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Installs.List failed.", ex);
            }
        }

        /// <summary>
        /// Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary. This method supports patch semantics. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/installs/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Androidenterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="deviceId">The Android ID of the device.</param>
        /// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
        /// <param name="body">A valid Androidenterprise v1 body.</param>
        /// <returns>InstallResponse</returns>
        public static Install Patch(AndroidenterpriseService service, string enterpriseId, string userId, string deviceId, string installId, Install body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (deviceId == null)
                    throw new ArgumentNullException(deviceId);
                if (installId == null)
                    throw new ArgumentNullException(installId);

                // Make the request.
                return service.Installs.Patch(body, enterpriseId, userId, deviceId, installId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Installs.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/installs/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Androidenterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="deviceId">The Android ID of the device.</param>
        /// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
        /// <param name="body">A valid Androidenterprise v1 body.</param>
        /// <returns>InstallResponse</returns>
        public static Install Update(AndroidenterpriseService service, string enterpriseId, string userId, string deviceId, string installId, Install body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (userId == null)
                    throw new ArgumentNullException(userId);
                if (deviceId == null)
                    throw new ArgumentNullException(deviceId);
                if (installId == null)
                    throw new ArgumentNullException(installId);

                // Make the request.
                return service.Installs.Update(body, enterpriseId, userId, deviceId, installId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Installs.Update failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}