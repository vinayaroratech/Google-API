// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Container v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Google Container Engine API is used for building and managing container based applications, powered by the open source Kubernetes technology.
// API Documentation Link https://cloud.google.com/container-engine/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Container/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Container.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Container.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Container.v1beta1;
using Google.Apis.Container.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Containerv1beta1.Methods
{
  
    public static class NodePoolsSample
    {

        public class NodePoolsListOptionalParms
        {
            /// The parent (project, location, cluster id) where the node pools will be listed.Specified in the format 'projects/*/locations/*/clusters/*'.
            public string Parent { get; set; }  
        
        }
 
        /// <summary>
        /// Lists the node pools for a cluster. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://developers.google.com/console/help/new/#projectnumber).This field is deprecated, use parent instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use parent instead.</param>
        /// <param name="clusterId">The name of the cluster.This field is deprecated, use parent instead.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListNodePoolsResponseResponse</returns>
        public static ListNodePoolsResponse List(ContainerService service, string projectId, string zone, string clusterId, NodePoolsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);

                // Building the initial request.
                var request = service.NodePools.List(projectId, zone, clusterId);

                // Applying optional parameters to the request.                
                request = (NodePoolsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.List failed.", ex);
            }
        }

        /// <summary>
        /// Roll back the previously Aborted or Failed NodePool upgrade.This will be an no-op if the last upgrade successfully completed. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/rollback
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://support.google.com/cloud/answer/6158840).This field is deprecated, use name instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use name instead.</param>
        /// <param name="clusterId">The name of the cluster to rollback.This field is deprecated, use name instead.</param>
        /// <param name="nodePoolId">The name of the node pool to rollback.This field is deprecated, use name instead.</param>
        /// <param name="body">A valid Container v1beta1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Rollback(ContainerService service, string projectId, string zone, string clusterId, string nodePoolId, RollbackNodePoolUpgradeRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);
                if (nodePoolId == null)
                    throw new ArgumentNullException(nodePoolId);

                // Make the request.
                return service.NodePools.Rollback(body, projectId, zone, clusterId, nodePoolId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.Rollback failed.", ex);
            }
        }

        /// <summary>
        /// Creates a node pool for a cluster. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://developers.google.com/console/help/new/#projectnumber).This field is deprecated, use parent instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use parent instead.</param>
        /// <param name="clusterId">The name of the cluster.This field is deprecated, use parent instead.</param>
        /// <param name="body">A valid Container v1beta1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(ContainerService service, string projectId, string zone, string clusterId, CreateNodePoolRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);

                // Make the request.
                return service.NodePools.Create(body, projectId, zone, clusterId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.Create failed.", ex);
            }
        }
        public class NodePoolsGetOptionalParms
        {
            /// The name (project, location, cluster, node pool id) of the node pool to get.Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
            public string Name { get; set; }  
        
        }
 
        /// <summary>
        /// Retrieves the node pool requested. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://developers.google.com/console/help/new/#projectnumber).This field is deprecated, use name instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use name instead.</param>
        /// <param name="clusterId">The name of the cluster.This field is deprecated, use name instead.</param>
        /// <param name="nodePoolId">The name of the node pool.This field is deprecated, use name instead.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>NodePoolResponse</returns>
        public static NodePool Get(ContainerService service, string projectId, string zone, string clusterId, string nodePoolId, NodePoolsGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);
                if (nodePoolId == null)
                    throw new ArgumentNullException(nodePoolId);

                // Building the initial request.
                var request = service.NodePools.Get(projectId, zone, clusterId, nodePoolId);

                // Applying optional parameters to the request.                
                request = (NodePoolsResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.Get failed.", ex);
            }
        }
        public class NodePoolsDeleteOptionalParms
        {
            /// The name (project, location, cluster, node pool id) of the node pool to delete.Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
            public string Name { get; set; }  
        
        }
 
        /// <summary>
        /// Deletes a node pool from a cluster. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://developers.google.com/console/help/new/#projectnumber).This field is deprecated, use name instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use name instead.</param>
        /// <param name="clusterId">The name of the cluster.This field is deprecated, use name instead.</param>
        /// <param name="nodePoolId">The name of the node pool to delete.This field is deprecated, use name instead.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(ContainerService service, string projectId, string zone, string clusterId, string nodePoolId, NodePoolsDeleteOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);
                if (nodePoolId == null)
                    throw new ArgumentNullException(nodePoolId);

                // Building the initial request.
                var request = service.NodePools.Delete(projectId, zone, clusterId, nodePoolId);

                // Applying optional parameters to the request.                
                request = (NodePoolsResource.DeleteRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.Delete failed.", ex);
            }
        }

        /// <summary>
        /// Sets the NodeManagement options for a node pool. 
        /// Documentation https://developers.google.com/container/v1beta1/reference/nodePools/setManagement
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Container service.</param>  
        /// <param name="projectId">The Google Developers Console [project ID or projectnumber](https://support.google.com/cloud/answer/6158840).This field is deprecated, use name instead.</param>
        /// <param name="zone">The name of the Google Compute Engine[zone](/compute/docs/zones#available) in which the clusterresides.This field is deprecated, use name instead.</param>
        /// <param name="clusterId">The name of the cluster to update.This field is deprecated, use name instead.</param>
        /// <param name="nodePoolId">The name of the node pool to update.This field is deprecated, use name instead.</param>
        /// <param name="body">A valid Container v1beta1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation SetManagement(ContainerService service, string projectId, string zone, string clusterId, string nodePoolId, SetNodePoolManagementRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (zone == null)
                    throw new ArgumentNullException(zone);
                if (clusterId == null)
                    throw new ArgumentNullException(clusterId);
                if (nodePoolId == null)
                    throw new ArgumentNullException(nodePoolId);

                // Make the request.
                return service.NodePools.SetManagement(body, projectId, zone, clusterId, nodePoolId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request NodePools.SetManagement failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}